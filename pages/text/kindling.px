<?xml version="1.0"?>
<page title='Kindling projects'>
<history>
<what when='20150119T083500'>Created.</what>
<what when='20150201T082900'>Added Game of Life and Programming Koans</what>
<what when='20150103T062800'>Added adventofcode and a few others</what>
<what when='20170420T104500'>Added donnemartin/interactive-coding-challenges</what>
<what when='20200903T165700'>Added poker and username generator</what>
<what when='20220716T192100'>Programming Koans is gone</what>
<what when='20220827T210100'>Added florinpop17/app-ideas</what>
<what when='20220829T145800'>Removed pythonpracticeprojects.com</what>
</history>
<meta>

<description>New programmers often need small projects to work on as they hone
their skills. This is a list of project ideas that beginners can
tackle.</description>

</meta>

<p>New programmers often need small projects to work on as they hone their
    skills.  Exercises in courses are too small, and don't leave much room for
    self-direction or extending to follow the interests of the student.  "Real"
    projects, either in the open-source world or at work, tend to be
    overwhelming and come with real-world constraints that prevent
    experimentation and pure coding practice.</p>

<p>Kindling projects are meant to fill this gap: simple enough that a new learner
    can take them on, but with possibilities for extension and creativity.
    Large enough that there isn't one right answer, but designed to be hacked
    on by a learner simply to flex their muscles.</p>

<p>This is a list of ideas, and pointers to lists of ideas, of projects that
    beginners can tackle.  If you have an idea to add, send it in.  I don't
    personally have experience with most of these pointers, so if you have a
    strong opinion about one, I'd be interested to hear it.</p>


<h1>Lists of projects</h1>

<p>Other peoples' lists of project ideas.  A word of warning: the lists can be
    overwhelming.  Don't try to take them all in: scan the list until you find
    one that strikes your fancy, and forget the rest.</p>

<ul>

<li><a href="https://github.com/florinpop17/app-ideas">App Ideas Collection</a>:
    Florin Pop's list of ideas for applications to build, categorized into Beginner,
    Intermediate, and Advanced.</li>

<li><a href="https://github.com/karan/Projects">Mega Project List</a>: Karan Goel
    has a list of project ideas, with solutions in separate repo.  These range
    from very simple (FizzBuzz) to very difficult (SQL Query Analyzer).</li>

<li><a href="http://rosettacode.org/wiki/Rosetta_Code">Rosetta Code</a>: A collection
    of <a href="http://rosettacode.org/wiki/Category:Programming_Tasks">programming tasks</a>,
    with solutions in many languages.  These tend to be smaller exercises.</li>

<li><a href="https://github.com/danistefanovic/build-your-own-x">Build Your Own X</a>:
    A list of links to tutorials about how to build lots of different software projects.
    Want to make your own programming language? Voxel engine? Game? Something in
    here will get you started.</li>

<li><a href="http://puzzles.bostonpython.com/">Boston Python Puzzles</a>: puzzles
    written to be solved by writing Python programs.</li>

<li><a href="http://rosalind.info">Rosalind</a>: A site devoted to teaching
    bioinformatics skills, with exercises in Python.</li>

<li><a href="http://programminghistorian.org/">The Programming Historian</a>:
    tutorials that help humanists, especially historians, learn digital
    techniques, including programming.</li>

<!-- Suggested by Blake Winton <bwinton@latte.ca> -->
<li>Programming Koans:
    "Clone a GitHub repository that has 200 or so failing test cases. Then, you
    work your way through the test cases, writing functions and filling in the
    blanks, getting the tests to pass one by one. The first few tests are very
    basic and assume no prior knowledge of the language, and then they build on
    each other, moving to more advanced topics."
    <ul>
    <li>The <a href="http://www.lauradhamilton.com/learn-a-new-programming-language-today-with-koans">original site</a>
         is gone, but an <a href="https://web.archive.org/web/20210816194117/http://www.lauradhamilton.com/learn-a-new-programming-language-today-with-koans">archive exists</a></li>
    <li><a href="https://github.com/gregmalcolm/python_koans">Python Koans</a></li>
    <li><a href="https://github.com/liammclennan/JavaScript-Koans">JavaScript Koans</a></li>
    <li><a href="https://github.com/marcinbunsch/bash_koans">Bash Koans</a></li>
    <li><a href="https://stevelosh.com/blog/2013/04/git-koans/">Git Koans</a></li>
    <li><a href="https://blog.sanctum.geek.nz/vim-koans/">Vim Koans</a></li>
    </ul>
    </li>

<li><a href="http://programmingpraxis.com/">Programming Praxis</a>: "This blog
    publishes new programming exercises weekly, at least, so that savvy
    programmers can maintain their skills by working the exercises and thinking
    outside their normal skill set, whatever that is."</li>

<li><a href="http://codekata.com/">CodeKata</a>: "A kata is an exercise in
    karate where you repeat a form many, many times, making little improvements
    in each. The intent behind code kata is similar. Each is a short exercise
    (perhaps 30 minutes to an hour long). Some involve programming, and can be
    coded in many different ways. Some are open ended, and involve thinking
    about the issues behind programming. These are unlikely to have a single
    correct answer."</li>

<li><a href="https://projecteuler.net/">Project Euler</a>: A collection of
    math/programming problems.  Many require math expertise to solve.</li>

</ul>


<h1>Projects</h1>

<p>Individual project ideas.</p>

<ul>

<li><a pref="blog/madlibs.bx">Mad Libs</a>: a simple text-based game with
    lots of possibilities for features.</li>

<li>Re-implement a Unix command to work the way you want.  Find, grep, and ls
    are good options.</li>

<li>Username generator: purely random? Based on a dictionary? Random but
    pronounceable? Lots of possibilities.</li>

<li>Poker game: start with code to rank hands, then add features until you have
    a playable poker game. Different poker games have different rules. This
    could keep you busy for a long time.</li>

<!-- Suggested by Julia Hansbrough -->
<li>It's a bit of a cliche, but: implement a blog.  The good news is, you
    already know how it should work.</li>

<!-- Suggested by Ben Hyde, bhyde@pobox.com -->
<li>Write a static site generator: start with whatever input format you like,
    and create a pile of static HTML pages from it.</li>

<!-- Suggested by Eric Hanchrow, eric.hanchrow@gmail.com -->
<li>Anagram generator.  Eric Hanchrow has a <a href="https://github.com/offby1/anagrams">collection
        of them written in many languages</a>.</li>

<!-- Suggested by Eric Hanchrow, eric.hanchrow@gmail.com -->
<li>An IRC bot: who doesn't want to write their own IRC bot?  You have a choice
    here: low-level direct with sockets (difficult to get exactly right), or
    higher-level with a framework like Twisted (harder to get started, but lots
    of details handled for you).</li>

<!-- Suggested by Julia Hansbrough -->
<li>Twitter bot: watch a Twitter stream, make new tweets.  Watch for certain
    words, transform tweets into other tweets, come up with something creative.
    Look into how <a href="http://en.wikipedia.org/wiki/ELIZA">ELIZA</a> worked
    to produce interactions with simple logic.</li>

<!-- Suggested by Pierre Lebeaupin <lebpierre@wanadoo.fr> -->
<li><a href="http://en.wikipedia.org/wiki/Conway%27s_Game_of_Life">Game of Life</a>:
    a classic computer science toy.  Simple implementations aren't difficult
    to implement, faster ones can become very involved.  You have a choice of
    how to produce output: terminal, curses, GUI, etc.</li>

<li>Write a simple Markdown to HTML converter.  Start simple, and add more
    features until you get tired of it!</li>

</ul>


<h1>Challenges</h1>

<p>These are series of exercises designed to teach a particular set of
    concepts.  They are much more guided than projects, but can also be a good
    way to level-up your skills.</p>

<ul>

<li><a href="https://github.com/donnemartin/interactive-coding-challenges">interactive-coding-challenges</a>:
    a set of Jupyter notebooks with algorithmic coding challenges and solutions.</li>

<li><a href="http://adventofcode.com/">Advent of Code</a>: 25 fun
    Christmas-themed challenges every year during December. Previous years are
    all available year-round.Each has two parts, often requiring refactoring.</li>

<!-- Suggested by Jeremy Beker, gothmog@confusticate.com -->
<li><a href="http://cryptopals.com/">Matasano Crypto Challenges</a>: learn
    cryptography concepts by working through a series of challenges and
    exercises.</li>

<!-- Suggested by Jeremy Beker, gothmog@confusticate.com -->
<li><a href="http://eudyptula-challenge.org/">The Eudyptula Challenge</a>: a
    series of programming exercises for the Linux kernel, conducted over email,
    just as Linux kernel development is.</li>

<li><a href="http://www.pythonchallenge.com/">The Python Challenge</a>: an old
    online puzzle requiring small amounts of coding, and outside-the-box puzzle
    solving.</li>

</ul>


<h1>Other</h1>

<p>These are more-polished practice sites, some for pay, some not.</p>

<ul>

<!-- Suggested by Artem, artem.bezsmertny@gmail.com -->
<li><a href="https://www.reddit.com/r/dailyprogrammer">r/dailyprogrammer</a>:
    A sub-reddit with three programming problems each week: easy, intermediate,
    and hard.  Each problem then gets a discussion with solutions if you want
    them.</li>

<!-- Suggested by Jeff, ggueritot@protonmail.com -->
<li><a href="https://www.codingame.com">CodinGame</a>: Slick coding games and
    programming challenges, including competitive coding tournaments.</li>

<li><a href="http://codewars.com">Codewars</a>: a gamified coding dojo: "Kata
    are real code challenges focused on improving skill and technique. Some
    train programming fundamentals, while others focus on complex problem
    solving. Each kata is crafted for and by the community."</li>

<li><a href="http://www.checkio.org/">CheckiO</a>: a game that develops coding
    skills as you progress.</li>

<li><a href="http://exercism.io/">exercism.io</a>: programming challenges, with
    discussion about the code.</li>

<li><a href="https://www.hackerrank.com/">HackerRank</a>: challenges categorized
    by language, domain, and difficulty.</li>

<!-- Suggested by Michael Smith, michael@smith-li.com -->
<li><a href="https://www.interviewcake.com/">Interview Cake</a>: a pay site
    that offers practice coding problems of the kind you might find in a coding
    interview.</li>

</ul>

<p>BTW: comments are welcome.  Comments suggesting new links will be
    incorporated and deleted.</p>

<pagecomments/>

</page>
