<?xml version="1.0"?>
<page title='Twitter tidbits'>
<history>
<what when='20220507T095400'>Created.</what>
</history>

<!-- This post is cogged. Re-cog it with:

    $ cog -rP pages/text/tidbits.px

-->

<!-- [[[cog from cog_helpers import get_tweet ]]] -->
<!-- [[[end]]] -->

<p>These are tidbits I've <a href="https://twitter.com/nedbat">tweeted</a>.
The tweets include code as images, both so they will fit, and to be more
visually appealing.  I've included the text here inline to make it easier to
find things.</p>

<h1links/>

<!-- =============================================== -->

<h1>dict.get</h1>

<!-- [[[cog get_tweet("https://twitter.com/nedbat/status/1522928485689348096") ]]] -->
<blockquote class="twitter-tweet"><p lang="en" dir="ltr">With data in a <a href="https://twitter.com/hashtag/Python?src=hash&amp;ref_src=twsrc%5Etfw">#Python</a> dict, you can use d.get as a function providing the same mapping: <a href="https://t.co/fOs6waf5Cl">pic.twitter.com/fOs6waf5Cl</a></p>— Ned Batchelder (@nedbat) <a href="https://twitter.com/nedbat/status/1522928485689348096?ref_src=twsrc%5Etfw">May 7, 2022</a></blockquote>
<!-- [[[end]]] -->

<code lang="pycon"><![CDATA[
>>> # How did each student do on the test?
>>> scores = {
...     'joe': 85,
...     'jane': 90,
...     'alex': 80,
...     'beth': 82,
... }

>>> students = ['beth', 'alex', 'jane', 'joe']

>>> # Sort students by their scores, highest first:
>>> sorted(students, key=scores.get, reverse=True)
['jane', 'joe', 'beth', 'alex']
]]></code>


<!-- =============================================== -->

<h1>Tuples as dict keys</h1>

<!-- [[[cog get_tweet("https://twitter.com/nedbat/status/1522543448376623104") ]]] -->
<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Python dicts can have tuples as keys. Consider a dict with (x,y) keys instead of nested lists for a grid.  It simplifies sparse grids, "resizes" are automatic, it doesn't matter where (0,0) is, and you can use negative positions: <a href="https://t.co/6IcJSUHBvl">pic.twitter.com/6IcJSUHBvl</a></p>— Ned Batchelder (@nedbat) <a href="https://twitter.com/nedbat/status/1522543448376623104?ref_src=twsrc%5Etfw">May 6, 2022</a></blockquote>
<!-- [[[end]]] -->


<code lang="pycon"><![CDATA[
>>> board = {}
>>> for x, y in [(1,0), (2,1), (0,2), (1,2), (2,2)]:
...     board[x, y] = "#"

>>> def min_max(nums):
...     return min(nums), max(nums)

>>> def print_board(board):
...     minx, maxx = min_max([x for x, _ in board])
...     miny, maxy = min_max([y for _, y in board])
...     for y in range(miny - 1, maxy + 2):
...         for x in range(minx - 1, maxx + 2):
...             print(board.get((x, y), "·"), end="")
...         print()

>>> print_board(board)
·····
··#··
···#·
·###·
·····
]]></code>

<code lang="pycon"><![CDATA[
>>> # Let's add more to the board..
>>> board[20, 3] = "$"
>>> print_board(board)
·······················
··#····················
···#···················
·###···················
·····················$·
·······················

>>> # And even more:
>>> for x, c in enumerate("@nedbat", start=20):
...     board[x, 3] = c
>>> print_board(board)
·····························
··#··························
···#·························
·###·························
·····················@nedbat·
·····························

>>> # Negative coordinates are ok:
>>> board[-10, -3] = "X"
>>> print_board(board)
·······································
·X·····································
·······································
·······································
············#··························
·············#·························
···········###·························
·······························@nedbat·
·······································
]]></code>


<!-- =============================================== -->

<h1>Mutable default values</h1>

<!-- [[[cog get_tweet("https://twitter.com/nedbat/status/1522184975818371072") ]]] -->
<blockquote class="twitter-tweet"><p lang="en" dir="ltr">A classic <a href="https://twitter.com/hashtag/python?src=hash&amp;ref_src=twsrc%5Etfw">#python</a> speed-bump: default values for function arguments are computed once, and shared for all calls. If you mutate them, the effect persists!  Use None instead: <a href="https://t.co/o7wIbUPKer">pic.twitter.com/o7wIbUPKer</a></p>— Ned Batchelder (@nedbat) <a href="https://twitter.com/nedbat/status/1522184975818371072?ref_src=twsrc%5Etfw">May 5, 2022</a></blockquote>
<!-- [[[end]]] -->

<code lang="pycon"><![CDATA[
>>> # Default values are shared between calls:
>>> def make_list(v, the_list=[]):
...     the_list.append(v)
...     return the_list

>>> make_list(12)
[12]                    # nice...
>>> make_list(47)
[12, 47]                # what!?  😭
>>> make_list("oh no")
[12, 47, 'oh no']       # WTF???  😡 🤬

>>> # Use None as the default instead:
>>> def make_list(v, the_list=None):
...     if the_list is None:
...         the_list = []
...     the_list.append(v)
...     return the_list

>>> make_list(12)
[12]    # ok...
>>> make_list(47)
[47]    # YES!  😎 🥳 😍
]]></code>



<!-- =============================================== -->

<h1>itertools.product</h1>

<!-- [[[cog get_tweet("https://twitter.com/nedbat/status/1524008099375427584") ]]] -->
<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Multiple loops can sometimes be replaced by one itertools.product() from the <a href="https://twitter.com/hashtag/python?src=hash&amp;ref_src=twsrc%5Etfw">#python</a> stdlib. <a href="https://t.co/50b7F4Z7UV">pic.twitter.com/50b7F4Z7UV</a></p>— Ned Batchelder (@nedbat) <a href="https://twitter.com/nedbat/status/1524008099375427584?ref_src=twsrc%5Etfw">May 10, 2022</a></blockquote>
<!-- [[[end]]] -->

<code lang="pycon"><![CDATA[
>>> import itertools, collections

>>> for x, y in itertools.product([-1, 1], [-1, 1]):
...     print(x, y)
-1 -1
-1 1
1 -1
1 1

>>> # All possible rolls of three dice.
>>> rolls = itertools.product(range(1, 7), repeat=3)
>>> tally = collections.Counter(sum(t) for t in rolls)
>>> for total in sorted(tally):
...     occurs = tally[total]
...     print(f"{total:3d}: {occurs:3d} {'░'*occurs}▌")

  3:   1 ░▌
  4:   3 ░░░▌
  5:   6 ░░░░░░▌
  6:  10 ░░░░░░░░░░▌
  7:  15 ░░░░░░░░░░░░░░░▌
  8:  21 ░░░░░░░░░░░░░░░░░░░░░▌
  9:  25 ░░░░░░░░░░░░░░░░░░░░░░░░░▌
 10:  27 ░░░░░░░░░░░░░░░░░░░░░░░░░░░▌
 11:  27 ░░░░░░░░░░░░░░░░░░░░░░░░░░░▌
 12:  25 ░░░░░░░░░░░░░░░░░░░░░░░░░▌
 13:  21 ░░░░░░░░░░░░░░░░░░░░░▌
 14:  15 ░░░░░░░░░░░░░░░▌
 15:  10 ░░░░░░░░░░▌
 16:   6 ░░░░░░▌
 17:   3 ░░░▌
 18:   1 ░▌
]]></code>


<h1>fileinput</h1>

<!-- [[[cog get_tweet("https://twitter.com/nedbat/status/1524355521314238466") ]]] -->
<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Python's fileinput module makes it easy to write CLI tools that operate on files or as a filter. <a href="https://t.co/XAgcp3EeaR">https://t.co/XAgcp3EeaR</a><br/>(BTW, bat: <a href="https://t.co/X5GldLbF0e">https://t.co/X5GldLbF0e</a>) <a href="https://t.co/6pChvWlFrr">pic.twitter.com/6pChvWlFrr</a></p>— Ned Batchelder (@nedbat) <a href="https://twitter.com/nedbat/status/1524355521314238466?ref_src=twsrc%5Etfw">May 11, 2022</a></blockquote>
<!-- [[[end]]] -->

<!-- https://gist.github.com/nedbat/e4c71261089929291968967ea72b1f4f -->
<code><![CDATA[
% bat upper.py
 ─────┬─────────────────────────────────────────────────────────────────────────────────────────────────────
    1 │ # Convert text to upper case.
    2 │
    3 │ import fileinput
    4 │
    5 │ for line in fileinput.input(inplace=True):
    6 │     line = line.upper()
    7 │     print(line, end="")
 ─────┴─────────────────────────────────────────────────────────────────────────────────────────────────────

% echo "Hello there" | python upper.py
HELLO THERE

% echo "Four score and seven years" > getty.txt

% echo "Lorem ipsum dolor sit amet" > lorem.txt

% python upper.py *.txt

% bat *.txt
 ─────┬─────────────────────────────────────────────────────────────────────────────────────────────────────
    1 │ FOUR SCORE AND SEVEN YEARS
 ─────┴─────────────────────────────────────────────────────────────────────────────────────────────────────
 ─────┬─────────────────────────────────────────────────────────────────────────────────────────────────────
    1 │ LOREM IPSUM DOLOR SIT AMET
 ─────┴─────────────────────────────────────────────────────────────────────────────────────────────────────
]]></code>


<h1>git squash</h1>


<!-- [[[cog get_tweet("https://twitter.com/nedbat/status/1525082030186405890") ]]] -->
<blockquote class="twitter-tweet"><p lang="en" dir="ltr">To make squashing in <a href="https://twitter.com/hashtag/git?src=hash&amp;ref_src=twsrc%5Etfw">#git</a> easier: make "git rebase -i" automatically stash changes and squash marked commits.  Then a "squash" alias that skips the editor completely: <a href="https://t.co/JIQ6FRV5Ob">pic.twitter.com/JIQ6FRV5Ob</a></p>— Ned Batchelder (@nedbat) <a href="https://twitter.com/nedbat/status/1525082030186405890?ref_src=twsrc%5Etfw">May 13, 2022</a></blockquote>
<!-- [[[end]]] -->

<!-- https://gist.github.com/nedbat/e7611b1d6842df971a44b75fecd08816 -->

<code lang="ini"><![CDATA[
# ~/.gitconfig
[rebase]
autostash = true    # stash/unstash work in progress
autosquash = true   # auto-squash marked commits

[alias]
# rebase without opening the editor
squash = "!f() { \
    : git show ; \
    git -c sequence.editor=: rebase -i ${1:-@~10}; \
}; f"
]]></code>


<h1>*map()</h1>

<!-- [[[cog get_tweet("https://twitter.com/nedbat/status/1525476718160527362") ]]] -->
<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Iterable unpacking (star in a <a href="https://twitter.com/hashtag/python?src=hash&amp;ref_src=twsrc%5Etfw">#python</a> list) makes a list from multiple iterables.  map() is a handy way to call functions (or classes!) on a set of values. Together they are powerful: <a href="https://t.co/gUXFHSzBgN">pic.twitter.com/gUXFHSzBgN</a></p>— Ned Batchelder (@nedbat) <a href="https://twitter.com/nedbat/status/1525476718160527362?ref_src=twsrc%5Etfw">May 14, 2022</a></blockquote>
<!-- [[[end]]] -->

<!-- https://gist.github.com/03adf71663a1eee526b777a09ec2479b -->

<code lang="pycon"><![CDATA[
>>> from pprint import pprint

>>> def twitter(nick): return f"https://twitter.com/@{nick}"

>>> def github(user): return f"https://github.com/{user}"

>>> def pypi(proj): return f"https://pypi.org/project/{proj}"

>>> links = [
...    *map(twitter, ["nedbat", "coveragepy"]),
...    github("nedbat"),
...    *map(pypi, ["coverage", "dinghy", "scriv", "cog"]),
... ]

>>> pprint(links)
['https://twitter.com/@nedbat',
 'https://twitter.com/@coveragepy',
 'https://github.com/nedbat',
 'https://pypi.org/project/coverage',
 'https://pypi.org/project/dinghy',
 'https://pypi.org/project/scriv',
 'https://pypi.org/project/cog']
]]></code>

<h1>"or" can be misleading</h1>


<!-- [[[cog get_tweet("https://twitter.com/nedbat/status/1526170483821092867") ]]] -->
<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Python's English-like syntax can be misleading. "or" doesn't work as many expect.<br/>BTW: there's a proposal to make this mistake a syntax error: <a href="https://t.co/A9AFORC49H">https://t.co/A9AFORC49H</a> <a href="https://t.co/1AKXnVQ6F1">pic.twitter.com/1AKXnVQ6F1</a></p>— Ned Batchelder (@nedbat) <a href="https://twitter.com/nedbat/status/1526170483821092867?ref_src=twsrc%5Etfw">May 16, 2022</a></blockquote>
<!-- [[[end]]] -->

<!-- https://gist.github.com/64635f5fc945ede8959e508fd5213167 -->
<code lang="pycon"><![CDATA[
# This seems like it would work..
answer = input("Should I?")
if answer == "y" or "yes":
    print("OK, I will")

# But it doesn't!
>>> for answer in ["y", "no 😭", "please stop 😡", "HECK NO! 🤬"]:
...     if answer == "y" or "yes":
...         print(f"OK, since you said: {answer}")
OK, since you said: y
OK, since you said: no 😭
OK, since you said: please stop 😡
OK, since you said: HECK NO! 🤬

# If the left arg is false, "or" returns its right arg:
>>> for answer in ["y", "no", "please stop", "HECK NO!"]:
...     print(f"{answer = :15}:", (answer == "y" or "yes"))
answer = y              : True
answer = no             : yes
answer = please stop    : yes
answer = HECK NO!       : yes

# This does what you want:
>>> for answer in ["y", "no", "please stop", "HECK NO!"]:
...     # another way: answer in ["y", "yes"]:
...     if answer == "y" or answer == "yes":
...         print(f"OK, since you said: {answer}")
OK, since you said: y
]]></code>


<h1>"in" checks identity first</h1>

<!-- [[[cog get_tweet("https://twitter.com/nedbat/status/1526869055314984965") ]]] -->
<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Classes in <a href="https://twitter.com/hashtag/Python?src=hash&amp;ref_src=twsrc%5Etfw">#Python</a> can define their own equality.  But containment checks with "in" use object identity first: <a href="https://t.co/zp04Hg4gqk">pic.twitter.com/zp04Hg4gqk</a></p>— Ned Batchelder (@nedbat) <a href="https://twitter.com/nedbat/status/1526869055314984965?ref_src=twsrc%5Etfw">May 18, 2022</a></blockquote>
<!-- [[[end]]] -->

<!-- https://gist.github.com/7a23372b196f7921534c420d4e55db92 -->

<code lang="pycon"><![CDATA[
>>> class Grumpy:
...     # I'm not equal to anything, even myself!
...     def __eq__(self, other):
...         return False

>>> g = Grumpy()
>>> g is g      # Identity: same object?
True
>>> g == g      # Equality: the object decides.
False

>>> # "in" checks identity before equality:
>>> g in [g]
True
>>> g in ["Doc", "Happy", g, "Sleepy", "Sneezy"]
True
]]></code>


<h1>Rolling bytes from bits</h1>

<!-- [[[cog get_tweet("https://twitter.com/nedbat/status/1527627196440920066") ]]] -->
<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Using a <a href="https://twitter.com/hashtag/python?src=hash&amp;ref_src=twsrc%5Etfw">#python</a> generator to build bytes using a rolling window over a stream of bits. <a href="https://t.co/wuKZrM2t3H">pic.twitter.com/wuKZrM2t3H</a></p>— Ned Batchelder (@nedbat) <a href="https://twitter.com/nedbat/status/1527627196440920066?ref_src=twsrc%5Etfw">May 20, 2022</a></blockquote>
<!-- [[[end]]] -->

<!-- https://gist.github.com/nedbat/778e92b9c509b66e0c0d15edf749ec24 -->

<code lang="pycon"><![CDATA[
>>> def rolling_bytes(bits):
...     """Bytes from a rolling window over bits."""
...     byte = 0
...     for bit in bits:
...         byte = ((byte << 1) | bit) & 0xFF
...         yield byte

>>> bits = [random.choice([0, 1]) for _ in range(18)]
>>> print(bits)
[1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1]

>>> for byte in rolling_bytes(bits):
...     print(f"0b{byte:08b}: 0x{byte:02x}")
0b00000001: 0x01
0b00000011: 0x03
0b00000110: 0x06
0b00001101: 0x0d
0b00011010: 0x1a
0b00110100: 0x34
0b01101000: 0x68
0b11010000: 0xd0
0b10100001: 0xa1
0b01000011: 0x43
0b10000110: 0x86
0b00001101: 0x0d
0b00011010: 0x1a
0b00110100: 0x34
0b01101000: 0x68
0b11010000: 0xd0
0b10100001: 0xa1
0b01000011: 0x43
]]></code>


<h1>Lists can hold any (and different) types</h1>

<!-- [[[cog get_tweet("https://twitter.com/nedbat/status/1528712346742366214") ]]] -->
<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Usually <a href="https://twitter.com/hashtag/Python?src=hash&amp;ref_src=twsrc%5Etfw">#Python</a> lists hold objects of all the same type, but they don't have to, and they can hold any type: <a href="https://t.co/oFhZrDKH0J">pic.twitter.com/oFhZrDKH0J</a></p>— Ned Batchelder (@nedbat) <a href="https://twitter.com/nedbat/status/1528712346742366214?ref_src=twsrc%5Etfw">May 23, 2022</a></blockquote>
<!-- [[[end]]] -->

<!-- https://gist.github.com/03ed086605c555b75290f216e6ce3351 -->

<code lang="pycon"><![CDATA[
>>> import math
>>> nums = [1, 2, 3]

>>> things = [
...     math,               # a module
...     math.factorial,     # a function
...     int,                # a type
...     nums.append,        # a method
...     nums,               # a list
...     KeyError("Ugh!"),   # an exception
...     KeyError,           # an exception class
... ]

>>> things[0].log10(20)     # math.log10(20)
1.3010299956639813

>>> things[1](6)            # math.factorial(6)
720

>>> things[2](3.14159)      # int(3.14159)
3

>>> things[3](99)           # nums.append(99)
>>> things[4]               # nums
[1, 2, 3, 99]

>>> try:
...     raise things[5]     # KeyError("Ugh!")
... except things[6] as e:  # KeyError
...     print(e)
...
'Ugh!'
]]></code>


<h1>defaultdict</h1>

<!-- [[[cog get_tweet("https://twitter.com/nedbat/status/1529098138837037057") ]]] -->
<blockquote class="twitter-tweet"><p lang="en" dir="ltr">A <a href="https://twitter.com/hashtag/Python?src=hash&amp;ref_src=twsrc%5Etfw">#Python</a> defaultdict takes a function that can make new values as needed. You don't have to check if a key exists before you add to its value! 😍🤓😎 <a href="https://t.co/SpHLLMKf13">pic.twitter.com/SpHLLMKf13</a></p>— Ned Batchelder (@nedbat) <a href="https://twitter.com/nedbat/status/1529098138837037057?ref_src=twsrc%5Etfw">May 24, 2022</a></blockquote>
<!-- [[[end]]] -->

<!-- https://gist.github.com/372adc1c0720141bf8ad4677b87e4c45 -->

<code lang="pycon"><![CDATA[
>>> # https://en.wikipedia.org/wiki/Gettysburg_Address
>>> speech = """
...     Four score and seven years ago our fathers brought forth
...     on this continent, a new nation, ...
...                     (... 17 lines snipped ...)
...     ... that government of the people, by the people, for the
...     people, shall not perish from the earth.
... """

>>> import collections

>>> initials = collections.defaultdict(set)
>>> for word in speech.split():
...     word = word.lower().strip(".,")
...     initials[word[0]].add(word)

>>> print(initials["n"])
{'nation', 'never', 'new', 'nobly', 'nor', 'not', 'note', 'now'}

>>> print(initials["p"])
{'people', 'perish', 'place', 'poor', 'portion', 'power', 'proper', 'proposition'}

>>> print(initials["d"])
{'dead', 'dedicate', 'dedicated', 'detract', 'devotion', 'did', 'died', 'do'}
]]></code>



<h1>strings are iterable</h1>

<!-- [[[cog get_tweet("https://twitter.com/nedbat/status/1530556246671216641") ]]] -->
<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Python strings are iterable, giving you their characters.  This is sometimes inconvenient, but here it's used three different ways to check if a string has properly balanced parentheses and brackets.<br/>Can you spot them all? 🧐🔎 <a href="https://t.co/HpsT7TwP3P">pic.twitter.com/HpsT7TwP3P</a></p>— Ned Batchelder (@nedbat) <a href="https://twitter.com/nedbat/status/1530556246671216641?ref_src=twsrc%5Etfw">May 28, 2022</a></blockquote>
<!-- [[[end]]] -->

<!-- https://gist.github.com/90e548c632d1e1b2a11aa686674bcdbe -->

<code lang="python"><![CDATA[
# Map closing bracket to the opening bracket:
openers = dict([")(", "][", "}{"])          # 1

def are_parens_balanced(text: str) -> bool:
    """Determine if paired brackets nest properly."""
    stack = []
    for char in text:                       # 2
        if char in "([{":                   # 3a
            stack.append(char)
        elif char in ")]}":                 # 3b
            if not stack:
                return False
            if stack[-1] != openers[char]:
                return False
            stack.pop()
    return not stack


import pytest

@pytest.mark.parametrize("text, res", [
    ("abcde", True),
    ("()()()", True),
    ("([{}])[()]()[]{{{look}}}", True),
    ("()()(]", False),
    ("]", False),
    ("[", False),
])
def test_it(text, res):
    assert are_parens_balanced(text) == res
]]></code>


<h1>__missing__</h1>

<!-- [[[cog get_tweet("https://twitter.com/nedbat/status/1531610946413666306") ]]] -->
<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Python dict subclasses can define __missing__: it's called when a key is missing.  Instead of hiding a dict in a function as a cache, how about hiding a function in a dict!? A Fibonacci dictionary: <a href="https://t.co/N2hE8p76lO">pic.twitter.com/N2hE8p76lO</a></p>— Ned Batchelder (@nedbat) <a href="https://twitter.com/nedbat/status/1531610946413666306?ref_src=twsrc%5Etfw">May 31, 2022</a></blockquote>
<!-- [[[end]]] -->

<code lang="pycon"><![CDATA[
>>> class FibDict(dict):
...     def __init__(self):
...         self[0] = self[1] = 1
...
...     def __missing__(self, k):
...         fibk = self[k] = self[k-1] + self[k-2]
...         return fibk

>>> fibd = FibDict()
>>> fibd[10]
89

>>> fibd[100]
573147844013817084101

>>> fibd[200]
453973694165307953197296969697410619233826

>>> len(fibd)
201
]]></code>


<h1>__innit__</h1>

<!-- [[[cog get_tweet("https://twitter.com/nedbat/status/1532345553538977803") ]]] -->
<blockquote class="twitter-tweet"><p lang="en" dir="ltr">In the UK, local slang lets you define more enthusiastic <a href="https://twitter.com/hashtag/Python?src=hash&amp;ref_src=twsrc%5Etfw">#Python</a> constructors: 🇬🇧 🤣 <a href="https://t.co/hnavanWDvy">pic.twitter.com/hnavanWDvy</a></p>— Ned Batchelder (@nedbat) <a href="https://twitter.com/nedbat/status/1532345553538977803?ref_src=twsrc%5Etfw">June 2, 2022</a></blockquote>
<!-- [[[end]]] -->

<!-- https://gist.github.com/3e8d5081e7635ab885aa6bee15819d2c -->

<code lang="python"><![CDATA[
# Tired:
class MyBoringClass:
    def __init__(self):     # 🥱
        ...

# Wired:
class MyExcitedClass:
    def __innit__(self):    # 🤣
        ...
]]></code>


<h1>Callable things</h1>

<!-- [[[cog get_tweet("https://twitter.com/nedbat/status/1532699139263315968") ]]] -->
<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Lots of <a href="https://twitter.com/hashtag/Python?src=hash&amp;ref_src=twsrc%5Etfw">#Python</a> things are callable, and you don't need to know what they are to call them: <a href="https://t.co/WcTThT7TXK">pic.twitter.com/WcTThT7TXK</a></p>— Ned Batchelder (@nedbat) <a href="https://twitter.com/nedbat/status/1532699139263315968?ref_src=twsrc%5Etfw">June 3, 2022</a></blockquote>
<!-- [[[end]]] -->

<!-- https://gist.github.com/b1d6c6fb35c45cd404c333b3ed062bda -->

<code lang="pycon"><![CDATA[
>>> def function():
...     return "A function"

>>> class Klass:
...     def __init__(self):
...         print("A constructor")
...
...     def method(self):
...         return "A method"
...
...     def __call__(self):
...         return "An object"

>>> obj = Klass()
A constructor

>>> a_type = list

>>> for callable_thing in [
...     function,
...     lambda: "Another function",
...     Klass,
...     obj.method,
...     obj,
...     a_type,
... ]:
...     print(callable_thing())

A function
Another function
A constructor
<__main__.Klass object at 0x1031f7bb0>
A method
An object
[]
]]></code>


<!-- spy_on_changes:
https://twitter.com/nedbat/status/1533454622450503680

-->


<!-- never use is:
https://twitter.com/nedbat/status/1534146403886170113
then quoted: https://twitter.com/nedbat/status/1534148551957151744
gist: https://gist.github.com/359916809322ac9667b224a63e1c33d3 -->


<!-- positional-only parameters:
https://twitter.com/nedbat/status/1534491626348871681
https://gist.github.com/nedbat/96637ed1d132958291a1f56d074ff7e8
-->

<!-- operator.attrgetter
https://twitter.com/nedbat/status/1534876179198578688
https://gist.github.com/nedbat/57240011c0eb629e6e48100fada1e14b
-->

<!-- types.SimpleNamespace
https://twitter.com/nedbat/status/1535260041758093315
https://gist.github.com/6ad15e55a63206e6ad49f3e68e1f4b69
-->

<!-- startswith tuples:
https://twitter.com/nedbat/status/1536682866813325316
https://gist.github.com/938d08297f866dc9ef56b56fb43d9ab1
-->

<!-- dict() takes pairs
https://twitter.com/nedbat/status/1537036194625622016
https://gist.github.com/0e053c8c23de3e6bc83727d3cd94240e
-->

<!-- sys.getsizeof
https://twitter.com/nedbat/status/1537415695377436674
https://gist.github.com/nedbat/2a76cd530cbdd7b1a5349978d66ea082
-->

<!-- complie-time calculations
https://twitter.com/nedbat/status/1537770200602378245
https://gist.github.com/nedbat/7da6e7ec43abfb4ec65614cae2e26ac3
-->

<!-- functions aren't equal
https://twitter.com/nedbat/status/1538865552529178629
https://gist.github.com/nedbat/ed818f5517e2d99282253813120f7623
-->

<!-- next() default:
https://twitter.com/nedbat/status/1539229625594830848
https://gist.github.com/c8536787ceed9a886d4946748adaf293
-->

<!-- listcomp with if:
https://twitter.com/nedbat/status/1539587002873643009
https://gist.github.com/0a7e866860208541286a86fb76e05a6d
-->


<!-- __line__
https://twitter.com/nedbat/status/1540686497556246529
https://gist.github.com/555f198cf961aaa864aed1104c9546bd
-->

<!-- match/case slice strings by strings
https://twitter.com/nedbat/status/1541398385214750728
https://gist.github.com/feac1c8203eb51022e0cc1fd95d7ae64
-->


<!-- __iter__ generator
https://twitter.com/nedbat/status/1541746079871426562
https://gist.github.com/f6fbf8179ad2ae21412ad66ac8447b91
-->

<!-- dict from flat pairs
https://twitter.com/nedbat/status/1542124221396144129
https://gist.github.com/717db38951c21c483621418d0c0644ad
-->

<!-- dict from flat pairs, part 2
https://twitter.com/nedbat/status/1542478807986077696
https://gist.github.com/717db38951c21c483621418d0c0644ad
-->


<!-- even_or_odd
https://twitter.com/nedbat/status/1542851970184216583
https://gist.github.com/e0e0aae0e12cdf70ade012383f61d7e3
-->

<!-- list slice assignment, sieve
https://twitter.com/nedbat/status/1543589123948023808
https://gist.github.com/65f42978681dcc34bda6492bb3564b0f
-->

<!--
decorator what
https://twitter.com/nedbat/status/1543933895514591237
https://gist.github.com/17d06368952619c3d36f92d3e8bb2aa0


isinstance union
https://twitter.com/nedbat/status/1544296283501895681
https://gist.github.com/309eae80a1c1d075c781431a739023c0


attrgetter dotted paths
https://twitter.com/nedbat/status/1544673319600922625
https://gist.github.com/9f4b2888546e6dab70d9d74415bcad75


ballat >> << @
https://twitter.com/nedbat/status/1545015851069349891
https://gist.github.com/e4f20d17f0573d3dea36d7c8f1963b59

lexical analyzer
https://twitter.com/nedbat/status/1545772259402338304
https://gist.github.com/nedbat/3676fdc9b3135b8f6a6c44447af906e1


jack tricky code
https://twitter.com/nedbat/status/1546151063903997954
https://gist.github.com/nedbat/9c04c92223071c048029aeae7b82d655

bools are ints
https://twitter.com/nedbat/status/1547924188832313344
https://gist.github.com/ba9cf2ea70a5b10646d130ec3897dd20

chained comparisons
https://twitter.com/nedbat/status/1548671110199140353
https://gist.github.com/1f9183198ad5ceb212e93094bda4d5eb

mutating while iterating
https://twitter.com/nedbat/status/1549371223829712896
https://gist.github.com/f0cc3cbed9edb5adeb78a94edba4522d

iterable things (walrus & carpenter)
https://twitter.com/nedbat/status/1549731346519445505
https://gist.github.com/415c77921b4937a05f23a7fbae7a5741

module __getattr__
https://twitter.com/nedbat/status/1550094740833480705
https://gist.github.com/300cf196ecf42928dadf4329fa95e84c

multi-variable assignment, including one
https://twitter.com/nedbat/status/1550461155230883841
https://gist.github.com/2cbc1e9f573acd97b0288fb9622fa776

sys.modules
https://twitter.com/nedbat/status/1550832351361372160
https://gist.github.com/d858d877e766fc62a8459861e6962137

re.flags or re.count?
https://twitter.com/nedbat/status/1551544292228730880
https://gist.github.com/71658934f492a351a878e4f86da67978

dis showing optimized expressions
https://twitter.com/nedbat/status/1552633469473157121
https://gist.github.com/66f6f65e2aa1804a605415467e0fd077

types of callables
https://twitter.com/nedbat/status/1554077836385959937
https://gist.github.com/123a653d5ed524a6611b9620d88e0631

match/case with regex
https://twitter.com/nedbat/status/1554441885871063040
https://gist.github.com/e2786a381d8ca48584eb06db2adcd2f9

if inside class
https://twitter.com/nedbat/status/1555173455854649344
https://gist.github.com/318053ee38ec782233c7ef3a29a7ae79

registering decorator
https://twitter.com/nedbat/status/1556982123810230273
https://gist.github.com/f84d1e888e2b989f88e9d6e14f3fc2b8

generator comprehension
https://twitter.com/nedbat/status/1557334948582924288
https://gist.github.com/060f0d29b68259320cde37fcf7b486b1

re.expand
https://twitter.com/nedbat/status/1559156450747826177
https://gist.github.com/ec89d0892fbf32a280b69310d98261c6

map multiple arguments
https://twitter.com/nedbat/status/1559877703653658624
https://gist.github.com/3f03ec622075d842bc50bc113d9e2079

hash() vs hashlib
https://twitter.com/nedbat/status/1560249620449710082
https://gist.github.com/nedbat/a75ebc415825b9b83c35550a85fc3897

converting an object to a dict
https://twitter.com/nedbat/status/1561694424169492481
https://gist.github.com/0cad41e68ba6bf089f17187857250258

dataclass initializers
https://twitter.com/nedbat/status/1562052785536892928
https://gist.github.com/a964b9af245d8171412eea08c536072e

sql injection
https://twitter.com/nedbat/status/1562784607812038656
https://gist.github.com/nedbat/1cfef252c0273b9b3512d4117e747e9c


cli dispatch
https://twitter.com/nedbat/status/1564234159056379905
https://gist.github.com/nedbat/449e4ef51b83432ad139ec3977501dfb


list.append vs set.add
https://twitter.com/nedbat/status/1564601329036640256
https://gist.github.com/f8cdd494276da1dfceb5da2d487eceea

permuted keys
https://twitter.com/nedbat/status/1564950652924710913
https://gist.github.com/d7a0cb8dff819fcb1aac4346e0a10351

anagrams
https://twitter.com/nedbat/status/1565295107095625728
https://gist.github.com/8184206c39301b2827481a371c437308

-->





<!-- ============================================================ -->

<comment>

    <h1>xxx</h1>

    <!-- [[[cog get_tweet("xxx") ]]] -->
    <!-- [[[end]]] -->

    <!-- https://gist.github.com/xxx -->

    <code><![CDATA[
    ]]></code>

</comment>

<!--

may:
print_eventually: https://twitter.com/nedbat/status/1523362897761824773
((above))
gen comp: https://twitter.com/nedbat/status/1521820685844180993
context mgrs: https://twitter.com/nedbat/status/1521469119240933376
max key: https://twitter.com/nedbat/status/1521110506211139584

april:
unlimited ints: https://twitter.com/nedbat/status/1520013025029369856
rf strings: https://twitter.com/nedbat/status/1519232884359397377
double list comp: https://twitter.com/nedbat/status/1518955211582099456
re.sub fn: https://twitter.com/nedbat/status/1518571274817187842
import antigravity: https://twitter.com/nedbat/status/1517898340473528320
split once: https://twitter.com/nedbat/status/1517506005474570240
split on whitespace: https://twitter.com/nedbat/status/1517097564105064449
is this an int: https://twitter.com/nedbat/status/1516755560296706051
unpack star: https://twitter.com/nedbat/status/1516391411184189441
break out of double loop: https://twitter.com/nedbat/status/1515345787563220996
custom formatting: https://twitter.com/nedbat/status/1514945634490494981
vars in format: https://twitter.com/nedbat/status/1514200977829629955
left-right format: https://twitter.com/nedbat/status/1513866020686995459
open far from with: https://twitter.com/nedbat/status/1512404137794711554
lambda in loop: https://twitter.com/nedbat/status/1512050306439282699
abstract iteration: https://twitter.com/nedbat/status/1511694713350332424
greedy dot-star: https://twitter.com/nedbat/status/1511328802814713861
print emoji: https://twitter.com/nedbat/status/1510987050261966854

march:
exception attributes: https://twitter.com/nedbat/status/1509495053072359425
two-arg iter: https://twitter.com/nedbat/status/1509144912054398986
bound methods: https://twitter.com/nedbat/status/1508793848876744705
truth in tuple: https://twitter.com/nedbat/status/1508426679818997762
removesuffix: https://twitter.com/nedbat/status/1507337250975199238
verbose regex: https://twitter.com/nedbat/status/1506959008854388736
_ in repl: https://twitter.com/nedbat/status/1506619018299396097
commas in formatting: https://twitter.com/nedbat/status/1506265186717552644
combine dicts: https://twitter.com/nedbat/status/1505883421289201667
regex named brackets: https://twitter.com/nedbat/status/1505594265803452417
regex square brackets: https://twitter.com/nedbat/status/1504790469972168705
spaces around f=: https://twitter.com/nedbat/status/1504473665336799236
f=: https://twitter.com/nedbat/status/1504460797359140866
circular list: https://twitter.com/nedbat/status/1504062673809338370
generator name scoping: https://twitter.com/nedbat/status/1503735148378001410
underscores in number: https://twitter.com/nedbat/status/1503419936932343815
bang-r: https://twitter.com/nedbat/status/1503352242748870657
no private methods: https://twitter.com/nedbat/status/1502289365862600704
pip install: https://twitter.com/nedbat/status/1501564714442280967
pprint.pp: https://twitter.com/nedbat/status/1501206353251119117
for-else: https://twitter.com/nedbat/status/1499383535886548998

feb:
set number ordering: https://twitter.com/nedbat/status/1498654538315694081
loop assign to non-name: https://twitter.com/nedbat/status/1498310018218676229
list/set ordering: https://twitter.com/nedbat/status/1497998213495750656
integer methods: https://twitter.com/nedbat/status/1497207503410511873
interleave sequences: https://twitter.com/nedbat/status/1495019059620069383
convert css color: https://twitter.com/nedbat/status/1493297104806195203
numbered strings: https://twitter.com/nedbat/status/1492889262466949125
aa000 -> zz999: https://twitter.com/nedbat/status/1492505752090595330
human sorting: https://twitter.com/nedbat/status/1491439999933292545
zsh globs: https://twitter.com/nedbat/status/1491032300800421892
don't change list len while looping: https://twitter.com/nedbat/status/1489955004018577419
zip transpose: https://twitter.com/nedbat/status/1489582258793156612

jan:
subset dict: https://twitter.com/nedbat/status/1487084661163626506
-->

</page>
