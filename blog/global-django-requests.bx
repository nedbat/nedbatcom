<?xml version='1.0' encoding='utf-8'?>
<blog>
<entry when='20100828T170950'>
<title>Global Django requests</title>
<category>django</category>
<body>
<p>As my Django sites get larger and larger, there inevitably comes a point
where I want access to the current request from deep inside some function
that doesn't have the request object.  The latest reason was that I wanted
a model class helper to have access to the session so it could access some
debug flags.</p>

<p>The first option for making this work was to pass the request object
through two or three layers of code that otherwise didn't need a request.
This meant changing the signature and callers of the two or three functions,
which felt messy.  The prospect of it made me unhappy.</p>

<p>The second option was to create a way for any code invoked as part of a
request to get access to the request, even if it weren't passed to it
explicitly.  I think of this as a global request object.
</p>

<p>Of course, there isn't really a single global request object, since there
can be many threads, each of which is handling a separate request.  We need
a way to associate the request with a thread, and then to get the request
for our thread.  This middleware does the job nicely:</p>

<code lang='python'><![CDATA[
from django.utils.thread_support import currentThread
_requests = {}

def get_request():
    return _requests[currentThread()]

class GlobalRequestMiddleware(object):
    def process_request(self, request):
        _requests[currentThread()] = request
]]></code>

<p>I didn't write this code, I got it from
<a href='http://stackoverflow.com/questions/653735/django-forms-set-an-initial-value-to-request-user/1233143#1233143'>here</a> and
<a href='http://bitbucket.org/vanschelven/global_request_middleware/src/df173c616e32/global_request_middleware/__init__.py'>here</a>,
not sure who wrote it first.  I'm also not sure why Django provides its
own currentThread function when the Python standard module threading provides
thread locals to achieve the same effect.</p>

<p>There's another way to get a global request object, but you probably won't
like it:</p>

<code lang='python'><![CDATA[
def get_request():
    """Walk up the stack, return the nearest first argument named "request"."""
    frame = None
    try:
        for f in inspect.stack()[1:]:
            frame = f[0]
            code = frame.f_code
            if code.co_varnames and code.co_varnames[0] == "request":
                return frame.f_locals['request']
    finally:
        del frame
]]></code>

<p>This function looks at the stack frames of all of its callers, looking for
one with a first argument named "request".  If found, it returns the value.
The problem with this function is that it can be fooled, and will return
the "request" it finds regardless of its type.</p>

<p>In its defense: GlobalRequestMiddleware requires more machinery, and adds
a tiny tax to every request.  If your need for the global request object
is rare, the frame-based get_request() may be better for you.  Also, it's
a (nasty) technique that can be adapted to other situations.</p>

</body>
</entry>
</blog>
