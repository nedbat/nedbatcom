<?xml version='1.0' encoding='utf-8'?>
<blog>
<entry when='20200313T140101'>
<title>Functional strategies in Python</title>
<category>python</category>
<category>devmindset</category>
<body>

<p>I got into a debate about Python's support for functional programming (FP)
with a friend.  One of the challenging parts was listening to him say, "Python
is broken" a number of times.</p>

<p>Python is not broken. It's just not a great language for writing pure
functional programs.  Python seemed broken to my friend in exactly the same way
that a hammer seems broken to someone trying to turn a screw with it.</p>

<p>I understand his frustration.  Once you have fully embraced the FP mindset,
it is difficult to understand why people would write programs any other way.</p>

<p>I have not fully embraced the FP mindset.  But that doesn't mean that I can't
apply some FP lessons to my Python programs.</p>

<p>In discussions about how FP and Python relate, I think too much attention is
paid to the tactics.  For example, some people say, "no need for
map/&#xAD;filter/&#xAD;lambda, use list comprehensions."  Not only does this put off FP
people because they're being told to abandon the tools they are used to, but it
gives the impression that list com&#xAD;pre&#xAD;hensions are somehow at odds with FP
constructs, or are exact replacements.</p>

<p>Rather than focus on the tactics, the important ideas to take from FP are
strategies, including:</p>

<ul>
<li>Write small functions with no side-effects</li>
<li>Don't change existing data, make new data</li>
<li>Combine functions to make larger functions</li>
</ul>

<p>These strategies all lead to modularized code, free from mysterious action at
a distance.  The code is easier to reason about, debug, and extend.</p>

<p>Of course, languages that are built from the ground up with these ideas in
mind will have great tools to support them.  They have tactics like:</p>

<ul>
<li>Immutable data structures</li>
<li>Rich libraries of higher-order functions</li>
<li>Good support for recursion</li>
</ul>

<p>Functional languages like Scheme, Clojure, Haskell, and Scala have these
tools built-in.  They are of course going to be way better for writing
Functional programs than Python is.</p>

<p>FP people look at Python, see none of these tools, and conclude that Python
can't be used for functional programming.  As I said before, Python is not a
great language for writing purely function programs.  But it's not a lost
cause.</p>

<p>Even without those FP tools in Python, we can keep the FP strategies in mind.
Although list comprehensions are presented as the alternative to FP tools, they
help with the FP strategies, because they force you to make new data instead of
mutating existing data.</p>

<p>If other FP professionals are like my friend, they are probably saying to
themselves, "Ned, you just don't get it." Perhaps that is true, how would I
know? That doesn't mean I can't improve my Python programs by thinking
Functionally.  I'm only just dipping my toes in the water so far, but I want
to do more.</p>

<p>For more thoughts about this:</p>

<ul>
    <li><a href='https://www.youtube.com/watch?v=eOYal8elnZk'>Gary Bernhardt: Boundaries</a>,
    a PyCon talk that discusses Functional Core and Imperative Shell.</li>
    <li>If you want more Functional tools, there are third-party Python packages like:
        <ul>
        <li><a href="https://pypi.org/project/pyrsistent/">pyrsistent</a>, providing immutable data structures</li>
        <li><a href="https://pypi.org/project/pydash/">pydash</a>, providing functional tools</li>
        <li><a href="https://pypi.org/project/fnc/">fnc</a>, providing functional tools</li>
        </ul>
    </li>

</ul>


<!--

moquist  7:23 AM
:scream: Unless list comprehension provides a way to produce a single result
from the list (like reduce), this is precisely the wrong way to go IMO;
'reduce' is the most fundamental and Guido explicitly chose an "easy" thing
instead of a "simple" thing: ...lambda, map() and filter() are still part of
core Python. Only reduce() had to go; it moved into the module functools.
His reasoning for dropping them is like this:
> There is an equally powerful alternative to lambda, filter, map and reduce,
> i.e. list comprehension.
> List comprehension is more evident and easier to understand
> Having both list comprehension and "Filter, map, reduce and lambda" is
> transgressing the Python motto "There should be one obvious way to solve a problem"
https://www.python-course.eu/python3_lambda.php

So add me to the list: "He expected resistance from the Lisp and the scheme
'folks'. What he didn't anticipate was the rigidity of this opposition."
python-course.eupython-course.eu
Chapter on the Lambda Operator and the functions map, filter and reduce

You can write filter and map by using reduce, but you can't create reduce given only the other two.

I don't see (yet) how list comprehension can do the same thing as reduce,
so that first claim seems patently false. Am I missing something?

nedbat  7:34 AM
list comprehensions cannot do the same thing as reduce

nedbat  8:02 AM
I think one of the challenges of being pro-functional-programming is coming to
terms with why it remains a minority technology after more than 50 years.

moquist  8:14 AM
@nedbat Do you think it's because we think of the world as a mutable place,
so mutation and procedural thinking fit the model of the world we use everywhere else?

nedbat  8:14 AM
basically, yes.

moquist  8:14 AM
I wasn't looking for a fight, just complaining and hoping someone could explain
how I was misunderstanding. :slightly_smiling_face:

nedbat  8:15 AM
I think the more accurate statement for Python is: “filter and map can usually
be replaced with list comprehensions; therefore you need lambda much less;
and reduce kind of gets lumped in with the rest”

btw, a similar impulse means that iteration is much preferred over recursion in python

moquist  8:17 AM
Your statement seems accurate to me.
Context: I'm trying to teach functional ideas to some Python programmers.
I thought I'd write a couple refactoring examples to show how Python can be
more functional, and ran into the above... hence my expression of dismay.

@nedbat Fair to say that Guido intentionally decided to aim Python more toward
"easy" and less toward "functional"? (I'm not saying that to be critical,
I'm asking if that's a fair statement.)

nedbat  8:20 AM
to me, the main idea from functional programming is not the tactics of filter,
map, reduce; but the strategy of not mutating data.

it’s definitely fair to say that guido aimed away from “functional”.

moquist  8:21 AM
OK

nedbat  8:21 AM
“toward easy” sounds a little more debatable over the nuances

moquist  8:21 AM
I don't have language examples in mind, but aren't there functional paradigms that mutate data?

nedbat  8:21 AM
he wanted Python to be approachable by lots of people

i’m not well versed enough in the variety of FP languages to know if there are paradigms that mutate data.

You can look at list comprehensions as aiding in the FP idea of, “don’t change the data, just make new data”


moquist  8:22 AM
@nedbat Yeah, I wasn't entirely comfortable with "easy" in my statement. I almost edited it to say "easy/clarity".


https://n01se.slack.com/archives/C47NLHRB3/p1581945771475500


nedbat  8:31 AM
@moquist thanks for asking this, it might become a blog post :slightly_smiling_face:

moquist  8:33 AM
@nedbat Thanks for responding with clarity! I really appreciate the comment
about noodling over why FP continues to be a minority technology.
@nedbat As I remember conversations with @aaron back in my PHP days,
he would look at my code or hear about scenarios and (for example) say
(very nicely :slightly_smiling_face:) "Hmm, I think it would be better to
write it with functions like A, B, C so you can test each piece and compose
them in different combinations". I would hear that and think "Yeah, I could
do that... but that sounds harder, and this is [almost working | stable | in
production]." As I look at the enormous, branching,
trying-trying-excepting-excepting-excepting Python code of this team
I'm trying to help, I want to say things just like @aaron said to me,
and yet I realize that despite my respect for @aaron I wasn't really able
to appreciate the reasoning until I learned FP.

Remembering the procedural|mutation-oriented code I used to write,
the FP I do now is obviously better. But how to help someone else see
the difference for themselves? If they don't become FPers that's OK,
but I would like to see the adoption of practices that lead to better
testability, constrained mutation scopes, and clearer control flows.
I don't know how to get them there without trying to take them along
a path similar to the one I walked... by learning FP. (edited)

nedbat  8:59 AM
The things that i focus on that help me:  1) smaller functions, 2) don’t change data
neither of those require passing functions to functions, which is a leap that people can find difficult.


nedbat  11:47 AM
i think you hit the nail on the head: people are taught from an early age how to work with mutable things.
You don’t hear this: “Here’s how to make a cake. Take a mixing bowl.  Turn it into a new bowl with flour in it…”

moquist  11:47 AM
So our from-the-cradle model of ourselves and the world is a very good fit with procedural/mutable programming.

nedbat  11:49 AM
Right. We often tell people in the Python world, “don’t modify the list,
make a new list” and that is hard enough for people to get used to.

natouno  11:49 AM
is right in the middle of some math, and can’t really participate, but… some
of us OLDER folks started when computing resource restraints were much tighter,
pre-GC, where mutability was “cheaper” than endlessly making copies of new objects


-->

<!--

moquist  9:22 AM
@nedbat In Stu Halloway's talk "Simplicity Ain't Easy", he has a slide with a kazoo and a violin and makes the point that if "ease for beginners" is the goal (of language designers or programmers) then we at least run the risk of relegating ourselves to the kazoo and never realizing the beauty and glory of a well-played violin. BUT... the majority of programmers are always going to be closer to beginning, or working with others who are closer to beginning. Many programmers never have reason, inclination, interest, etc. in moving beyond the "kazoo". So maybe there's value in the strategy of attempting to meet beginners where they are but still provide tools for the budding violinists. As a junior-varsity violinist, I do find it frustrating to discover myself on a team of kazooists.
9:23
The main reason for my comment is the middle bit, realizing that beginners are almost always the majority, so that's another reason haughty violin hawkers only ever reach a niche market, even if the benefits they cite aren't imaginary.
9:23
I'd like to help this team of kazooists move beyond the stage where they play everything as loud and fast as possible...

nedbat  9:24 AM
i want to talk about this a lot.  i also am in a meeting atm

moquist  9:24 AM
ends, for now, his metacommentary and increasingly strained metaphor.

nedbat  9:25 AM
tl;dr: there are other instruments than violins; the goal is beautiful music, don’t fixate on the instrument.

aaron  9:26 AM
@nedbat Python is a hot mess when it comes to mutation. Dicts and default parameter values are great examples of python landmines. Sure strings and tuples are immutable but you can't actually write any generic code that operates on generic Dicts (yes there are immutable Dicts but they're an entirely separate thing). I get so frustrated when trying to do FP in python. It fights you and makes it too hard to do properly.

nedbat  9:26 AM
i can understand that feeling

aaron  9:31 AM
@nedbat Reduce, foldl, etc. are also very core pieces of another aspect of functional programming which is functional composition. Functional composition is possible in any language that allows you to pass functions as values and create on-demand function closures. This ability gives you an expressiveness that templating aims to give you in OOP languages but is much more powerful (because it's not constrained by coding time types but by runtime values). This is definitely a blub feature... it's the sort of thing you don't miss until you've had it and understand what it can do.

nedbat  9:31 AM
i’m curious about “generic code that operates on generic dicts”: what would that look like, and why is it hard in Python?

aaron  9:31 AM
Because update on a dict only ever returns None... the API contract enforces mutation only.
9:32
@nedbat Python is also terrible when it comes to function closures... it basically doesn't do them in any helpful sort of way.


-->



</body>
</entry>
</blog>
