<?xml version='1.0' encoding='utf-8'?>
<blog>
<entry when='20211212T120014' draft='y'>
<title>Adding to coverage.py</title>
<category></category>
<!--
<description></description>
<img src="pix/cards/xxx.png" alt=""/>
-->
<body>

<p>One of the challenges in maintaining an open source package is being the
product manager: deciding what features go in, and when.  People have ideas for
features. Not all of them will get added.  How to decide what's in and what's
not?</p>

<p>Coverage.py is widely used, so there are
<a urlid="enhancements">frequent requests for new features or behavior</a>. Some
are outside what coverage should be doing
(<a href="https://github.com/nedbat/coveragepy/issues/1654">How to use coverage to get the test execution report?</a>),
or I think are bad ideas
(<a href="https://github.com/nedbat/coveragepy/issues/1627">Reducing the need for multiple coverage commands</a>),
but many of them are interesting and need consideration.</p>

<url id="enhancements" href="https://github.com/nedbat/coveragepy/issues?q=is%3Aissue+is%3Aopen+label%3Aenhancement"/>

<p>Examples:
- more fail-under logic: https://github.com/nedbat/coveragepy/labels/target
- lcov report: https://github.com/nedbat/coveragepy/pull/1289
- coverage for a pull request
</p>

<p>Pros:
- easy for people to discover
- tested with the rest of the code, so it stays working
</p>

<p>Cons:
- more code to maintain
- coverage.py avoids dependencies, so harder to implement
</p>

<p>Here are some options:</p>

<ul>

<li>Add the feature to coverage.py</li>
<li>Add the feature as an optional extra.</li>
<li>Build it as a plugin.</li>
<li>Build the feature as a separate project, but mention the project in the docs and help.</li>
<li>Build the feature as a separate project.</li>
<li>Do nothing</li>

</ul>

</body>
</entry>
</blog>
