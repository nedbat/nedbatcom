<?xml version='1.0' encoding='utf-8'?>
<blog>
<entry when='20081130T103245'>
<title>Things I don't like about doctest</title>
<category>testing</category>
<category>python</category>
<body>
<p>Python's <a href='https://docs.python.org/3/library/doctest.html'>doctest</a>
is very cool technology, letting you write a narrative in documentation that can
then be executed directly to test the code.  But as cool as it is, I don't like
it very much:</p>

<ul>
<li>You can't run a subset of the tests.</li>
<li>If a failure happens in the middle of the doctest, the whole thing stops.</li>
<li>The coding style is stylized, and has to have printable results.</li>
<li>Your code is executed in a special way, so it's harder to reason about how
it will be executed, harder to add helpers, and harder to program around the tests.</li>
</ul>

<p>Most importantly, though, doctest seems like an odd way to write tests.  Docstrings,
and the long sequence of code they encourage, may be good ways to explain what
code does, but explaining and testing are two different tasks, and the code you
write for each will be different.  So why try to serve two masters at once?</p>

<p>Either your expository text will be cluttered with uninformative edge cases,
or your tests will merely skim the surface of what your code can do.</p>

<p>I know that doctest can be used independently of the actual docstrings in the
code, but then where's the great advantage?  I'd rather use real software engineering
tools to write my tests, and the idiomatic way doctest executes code and evaluates
results don't help me.</p>

<p>I'm not the only one who feels this way.  Andrew Bennetts has two posts with
much more detail about these issues:
<a href='http://andrew.puzzling.org/diary/2008/October/23/narrative-tests'>Narrative tests are lousy tests</a> and
<a href='http://andrew.puzzling.org/diary/2008/October/24/more-doctest-problems'>Tests are code, doctests aren't</a>.
</p>

<p>While I admire the ingenuity that went into doctest, I just don't find it a
good tool for testing real code.</p>

</body>
</entry>
</blog>
