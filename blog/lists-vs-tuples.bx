<?xml version='1.0' encoding='utf-8'?>
<blog>
<entry when='20160818T061433'>
<title>Lists vs. Tuples</title>
<category>python</category>

<description>A common Python question: what's the difference between a
list and a tuple?  There are two different differences, with
complex interplay between the two.</description>

<body>

<p>A common Python question: what's the difference between a list and
    a tuple?</p>

<p>The answer is that there are two different differences, with complex
    interplay between the two.  There is the Technical Difference, and the
    Cultural Difference.</p>

<p>First, the things that are the same: both lists and tuples are containers,
    a sequence of objects:</p>

<code lang="pycon"><![CDATA[
>>> my_list = [1, 2, 3]
>>> type(my_list)
<class 'list'>
>>> my_tuple = (1, 2, 3)
>>> type(my_tuple)
<class 'tuple'>
]]></code>

<p>Either can have elements of any type, even within a single sequence.
    Both maintain the order of the elements (unlike sets and dicts).</p>

<p>Now for the differences.  The Technical Difference between lists and tuples
    is that lists are mutable (can be changed) and tuples are immutable (cannot
    be changed).  This is the only distinction that the Python language makes
    between them:</p>

<code lang="pycon"><![CDATA[
>>> my_list[1] = "two"
>>> my_list
[1, 'two', 3]
>>> my_tuple[1] = "two"
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: 'tuple' object does not support item assignment
]]></code>

<p>That's the only technical difference between lists and tuples, though it
    manifests in a few ways.  For example, lists have a .append() method to add
    more elements to the list, while tuples do not:</p>

<code lang="pycon"><![CDATA[
>>> my_list.append("four")
>>> my_list
[1, 'two', 3, 'four']
>>> my_tuple.append("four")
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: 'tuple' object has no attribute 'append'
]]></code>

<p>Tuples have no need for an .append() method, because you can't modify
    tuples.</p>

<p>The Cultural Difference is about how lists and tuples are actually
    used: lists are used where you have a homogenous sequence of unknown
    length; tuples are used where you know the number of elements in advance
    because the position of the element is semantically significant.</p>

<p>Another way to say it: a list is an arbitrary number of similar things; a
    tuple is one thing with a known number of (possibly dissimilar) parts.</p>

<p>For example, suppose you have a function that looks in a directory for files
    ending with *.py.  It should return a list, because you don't know how many
    you will find, and all of them are the same semantically: just another file
    that you found.</p>

<code lang="pycon"><![CDATA[
>>> find_files("*.py")
["control.py", "config.py", "cmdline.py", "backward.py"]
]]></code>

<p>On the other hand, let's say you need to store five values to represent the
    location of weather observation stations: id, city, state, latitude, and
    longitude.  A tuple is right for this, rather than a list:</p>

<code lang="pycon"><![CDATA[
>>> denver = (44, "Denver", "CO", 40, 105)
>>> denver[1]
'Denver'
]]></code>

<p>(For the moment, let's not talk about using a class for this.) Here the
    first element is the id, the second element is the city, and so on.  The
    position determines the meaning.</p>

<p>To put the Cultural Difference in terms of the C language, lists are like
    arrays, tuples are like structs.</p>

<p>Python has a namedtuple facility that can make the meaning more explicit:</p>

<code lang="pycon"><![CDATA[
>>> from collections import namedtuple
>>> Station = namedtuple("Station", "id, city, state, lat, long")
>>> denver = Station(44, "Denver", "CO", 40, 105)
>>> denver
Station(id=44, city='Denver', state='CO', lat=40, long=105)
>>> denver.city
'Denver'
>>> denver[1]
'Denver'
]]></code>

<p>One clever summary of the Cultural Difference between tuples and lists is:
    tuples are namedtuples without the names.</p>

<p>The Technical Difference and the Cultural Difference are an uneasy alliance,
    because they are sometimes at odds.  Why should homogenous sequences be
    mutable, but hetergenous sequences not be? For example, I can't modify my
    weather station because a namedtuple is a tuple, which is immutable:</p>

<code lang="pycon"><![CDATA[
>>> denver.lat = 39.7392
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: can't set attribute
]]></code>

<p>And sometimes the Technical considerations override the Cultural
    considerations.  You cannot use a list as a dictionary key, because only
    immutable values can be hashed, so only immutable values can be keys.  To
    use a list as a key, you can turn it into a tuple:</p>

<code lang="pycon"><![CDATA[
>>> d = {}
>>> nums = [1, 2, 3]
>>> d[nums] = "hello"
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: unhashable type: 'list'
>>> d[tuple(nums)] = "hello"
>>> d
{(1, 2, 3): 'hello'}
]]></code>

<p>Another conflict between the Technical and the Cultural: there are places in
    Python itself where a tuple is used when a list makes more sense. When you
    define a function with *args, args is passed to you as a tuple, even though
    the position of the values isn't significant, at least as far as Python
    knows.  You might say it's a tuple because you cannot change what you were
    passed, but that's just valuing the Technical Difference over the
    Cultural.</p>

<p>I know, I know: in *args, the position could be significant because they are
    positional parameters.  But in a function that's accepting *args and
    passing it along to another function, it's just a sequence of arguments,
    none different from another, and the number of them can vary between
    invocations.</p>

<p>Python uses tuples here because they are a little more space-efficient
    than lists. Lists are over-allocated to make appending faster.  This shows
    Python's pragmatic side: rather than quibble over the list/tuple semantics
    of *args, just use the data structure that works best in this case.</p>

<p>For the most part, you should choose whether to use a list or a tuple based
    on the Cultural Difference.  Think about what your data means. If it can
    have different lengths based on what your program encounters in the real
    world, then it is probably a list.  If you know when you write the code
    what the third element means, then it is probably a tuple.</p>

<p>On the other hand, functional programming emphasizes immutable data
    structures as a way to avoid side-effects that can make it difficult to
    reason about code.  If you are a functional programming fan, you will
    probably prefer tuples for their immutability.</p>

<p>So: should you use a tuple or a list? The answer is: it's not always a
    simple answer.</p>

</body>
</entry>
</blog>
