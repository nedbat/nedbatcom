<?xml version='1.0' encoding='utf-8'?>
<blog>
<entry when='20230616T065300'>
<title>Math factoid of the day: 61</title>
<category>me</category>
<category>math</category>

<description>What's interesting about 61?</description>
<img src="pix/cards/61.png" alt="61 dots, arranged in a square, a hexagon, and a decagon"/>

<body>

<p>A <a href="https://en.wikipedia.org/wiki/Figurate_number">figurate
number</a> is one that can be represented as a filled polygon of that number of
dots. A centered figurate number includes a dot at the center. 61 is the only
number (other than the trivial 1) that is a
<a href="https://en.wikipedia.org/wiki/Centered_square_number">centered square
number</a>, a
<a href="https://en.wikipedia.org/wiki/Centered_hexagonal_number">centered
hexagonal number</a>, and a
<a href="https://en.wikipedia.org/wiki/Centered_decagonal_number">centered
decagonal number</a>:</p>

<ul>
<li><a href="https://oeis.org/A001844">Square</a>:  1, 5, 13, 25, 41, <b>61</b>, 85, 113, 145, 181, ...</li>
<li><a href="https://oeis.org/A003215">Hexagonal</a>: 1, 7, 19, 37, <b>61</b>, 91, 127, 169, 217, 271, ...</li>
<li><a href="https://oeis.org/A062786">Decagonal</a>: 1, 11, 31, <b>61</b>, 101, 151, 211, 281, 361, ...</li>
</ul>


<!--
figurate.py: up to 200,593,100,000,000,000,000 in 14h20m
   75,409,500,001,710,966,427;  Δ=3.7e+15;  ns = 6140419367 5013631419 3883542198
  273,117,600,009,200,816,251;  Δ=5.7e+15;  ns = 11685837582 9541446431 7390772626
  350,390,600,001,167,141,011;  Δ=9.5e+15;  ns = 13236136143 10807259905 8371267527
  550,208,300,024,494,445,461;  Δ=1.0e+16;  ns = 16586263895 13542627761 10490074357
  600,696,100,014,495,815,005;  Δ=8.7e+15;  ns = 17330552502 14150336863 10960803803
1,204,104,000,072,665,655,871;  Δ=1.5e+16;  ns = 24536747951 20034170810 15518401980
1,388,420,800,009,434,111,241;  Δ=1.3e+16;  ns = 26347872780 21512948039 16663857897
1,773,140,000,011,447,405,357;  Δ=2.4e+16;  ns = 29775325355 24311451349 18831569239
2,001,700,000,060,662,595,513;  Δ=1.9e+16;  ns = 31636213428 25830860097 20008498195
2,337,287,700,022,194,616,211;  Δ=2.8e+16;  ns = 34185433301 27912289408 21620766407
4,229,385,900,058,111,076,681;  Δ=3.8e+16;  ns = 45985790741 37547240911 29083967749
5,735,268,000,092,981,996,461;  Δ=4.6e+16;  ns = 53550294117 43723632054 33868179757
6,042,362,100,034,026,604,345;  Δ=5.4e+16;  ns = 54965271309 44878956093 34763089909
7,000,307,000,149,347,392,527;  Δ=3.4e+16;  ns = 59162095129 48305648394 37417394351
8,000,858,700,041,443,447,781;  Δ=5.7e+16;  ns = 63248947422 51642549317 40002146693
10,421,024,900,199,954,292,561;  Δ=4.4e+16;  ns = 72183879433 58937890755 45653093872
-->

<p>Here are diagrams of 61 dots, arranged as centered square, hexagonal and
decagonal numbers:</p>

<figurep>
<img class="touching" src="pix/figurate-4.png" width="190" height="190" alt="Diagram of centered square number: 61" caption="Square" />
<img class="touching" src="pix/figurate-6.png" width="190" height="190" alt="Diagram of centered hexagonal number: 61" caption="Hexagonal" />
<img class="touching" src="pix/figurate-10.png" width="190" height="190" alt="Diagram of centered decagonal number: 61" caption="Decagonal" />
</figurep>

<p>I'm sure there's a math way to prove that 61 is the only number in all three
sequences, but I don't know it.  Instead, I wrote a small program to test it
empirically:</p>

<code lang='python'><![CDATA[
import itertools

def intersect_monotonic_sequences(*seqs):
    """Find numbers that appear in all sequences.

    `seqs` must be monotonic integer sequences.
    """
    # A list of lists.  First element is the latest number
    # from the sequence, third element is the sequence.
    # Second element is a tie-breaker so we don't try to
    # compare the sequences themselves when sorting.
    work = [[next(seq), i, seq] for i, seq in enumerate(seqs)]
    work.sort()
    # v0 is the smallest value we've gotten from any sequence.
    v0 = work[0][0]
    while True:
        # If all of the sequences produced the same number,
        # we found what we're looking for.
        if all(item[0] == v0 for item in work):
            print(f"{v0:,}")
        # Sort the work so we look at the smallest number next.
        work.sort()
        v0 = work[0][0] = next(work[0][2])


# Centered number formulas

def centered_4(n):
    return n**2 + (n - 1)**2

def centered_6(n):
    return n**3 - (n - 1)**3

def centered_10(n):
    return 5 * n**2 - 5 * n + 1

intersect_monotonic_sequences(
    map(centered_4, itertools.count(1)),
    map(centered_6, itertools.count(1)),
    map(centered_10, itertools.count(1)),
)
]]></code>

<p>The program keeps a list of all of the sequences and their latest result. At
each iteration, it chooses the smallest result so far, and moves that sequence
ahead one step.  If all of the current results are equal, we've found a number
that occurs in all of the sequences.  This code was the first version of the
program.  The
<a href="https://github.com/nedbat/odds/blob/master/figurate/figurate.py">final
program</a> was more elaborate, with progress reports and restartability.</p>

<p>This program confirmed that 1 and 61 are the only numbers less than
10<sup>22</sup> in all three sequences.</p>

<p>To make sure the program was working, I used it to confirm that these numbers
are <a href="https://oeis.org/A219113">both centered square and centered
hexagonal</a>: 1, 61, 5941, 582121, 57041881, 5589522181, 547716131821,
53670591396241, 5259170240699761.</p>

<!--
<tr><td align="right">1</td></tr>
<tr><td align="right">61</td></tr>
<tr><td align="right">5,941</td></tr>
<tr><td align="right">582,121</td></tr>
<tr><td align="right">57,041,881</td></tr>
<tr><td align="right">5,589,522,181</td></tr>
<tr><td align="right">547,716,131,821</td></tr>
<tr><td align="right">53,670,591,396,241</td></tr>
<tr><td align="right">5,259,170,240,699,761</td></tr>
-->

<p>Another fun part of this exploration was drawing the figures.  I wrote a
PostScript program
(<a href="https://github.com/nedbat/odds/blob/master/figurate/figurate.ps">figurate.ps</a>),
and rendered it with <a pref="blog/stilted.bx">Stilted</a>, my janky PostScript
knock-off from last summer.</p>

</body>
</entry>

</blog>
