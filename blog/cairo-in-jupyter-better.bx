<?xml version='1.0' encoding='utf-8'?>
<blog>
<entry when='20220515T153215'>
<title>Cairo in Jupyter, better</title>
<category>graphics</category>
<category>jupyter</category>
<!--
<description></description>
<img src="pix/cards/xxx.png" alt=""/>
-->
<body>

<p>I finally came up with a way I like to create
<a href="https://pycairo.readthedocs.io/en/latest/index.html">PyCairo</a>
drawings in a Jupyter notebook.</p>

<p>A few years ago I wrote here about
<a pref="blog/drawing-cairo-svg-in-a-jupyter-notebook.bx">how to draw Cairo
SVG in a Jupyter notebook</a>.  That worked, but wasn't as convenient as I
wanted.  Now I have a module that manages the PyCairo contexts for me. It
automatically handles the displaying of SVG and PNG directly in the notebook, or
lets me write them to a file.</p>

<p>The module is
<a href="https://github.com/nedbat/truchet/blob/main/drawing.py">drawing.py</a>.</p>

<p>The code looks like this (with a sample drawing copied from the PyCairo docs):</p>

<code lang="python"><![CDATA[
from drawing import cairo_context

def demo():
    with cairo_context(200, 200, format="svg") as context:
        x, y, x1, y1 = 0.1, 0.5, 0.4, 0.9
        x2, y2, x3, y3 = 0.6, 0.1, 0.9, 0.5
        context.scale(200, 200)
        context.set_line_width(0.04)
        context.move_to(x, y)
        context.curve_to(x1, y1, x2, y2, x3, y3)
        context.stroke()
        context.set_source_rgba(1, 0.2, 0.2, 0.6)
        context.set_line_width(0.02)
        context.move_to(x, y)
        context.line_to(x1, y1)
        context.move_to(x2, y2)
        context.line_to(x3, y3)
        context.stroke()
    return context

demo()
]]></code>

<p>Using <codeword>demo()</codeword> in a notebook cell will draw the SVG. Nice.</p>

<p>The key to making this work is Jupyter's
<a href="https://ipython.readthedocs.io/en/stable/config/integrating.html#rich-display">special
methods</a> _repr_svg_, _repr_png_, and a little _repr_html_ thrown in also.</p>

<p>The code is at <a href="https://github.com/nedbat/truchet/blob/main/drawing.py">drawing.py</a>.
I created it so that I could play around with Truchet tiles:</p>

<figurep href="https://github.com/nedbat/truchet">
    <img src="pix/truchet.png" alt="A multi-scale Truchet tiling"/>
</figurep>

</body>
</entry>
</blog>
