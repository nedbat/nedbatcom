<?xml version='1.0' encoding='utf-8'?>
<blog>
<entry when='20250926T081404'>
<title>Hobby Hilbert Simplex</title>
<category>genart</category>
<category>algorithms</category>

<description>An exploration and explanation of how to generate interesting swoopy art.</description>
<img src="pix/fluidity/first_line_runs.png" alt="Two curving smoky abstract shapes"/>

<body>

<p>I saw a generative art piece I liked and wanted to learn how it was made.
Starting with the artist's Kotlin code, I dug into three new algorithms, hacked
together some Python code, experimented with alternatives, and learned a lot.
Now I can explain it to you.</p>

<p>It all started with this post by
<a href="https://genart.social/@hamoid/115125620138280715">aBe on Mastodon</a>:</p>

<blockquote class="mastodon-post" lang="en" cite="https://genart.social/@hamoid/115125620138280715" data-source="fediverse">
  <p>I love how these lines separate and reunite. And the fact that I can express this idea in 3 or 4 lines of code.</p><p>For me they're lives represented by closed paths that end where they started, spending part of the journey together, separating while we go in different directions and maybe reconnecting again in the future.</p><p><a href="https://genart.social/tags/CreativeCoding" class="mention hashtag" rel="nofollow noopener" target="_blank">#<span>CreativeCoding</span></a> <a href="https://genart.social/tags/algorithmicart" class="mention hashtag" rel="nofollow noopener" target="_blank">#<span>algorithmicart</span></a>  <a href="https://genart.social/tags/proceduralArt" class="mention hashtag" rel="nofollow noopener" target="_blank">#<span>proceduralArt</span></a> <a href="https://genart.social/tags/OPENRNDR" class="mention hashtag" rel="nofollow noopener" target="_blank">#<span>OPENRNDR</span></a> <a href="https://genart.social/tags/Kotlin" class="mention hashtag" rel="nofollow noopener" target="_blank">#<span>Kotlin</span></a></p>
  <figure><img src="https://media.hachyderm.io/cache/media_attachments/files/115/125/620/285/265/947/small/5a73d40e6a4a81c1.png" width="480" height="480" alt="80 wobbly black hobby curves with low opacity. In some places the curves travel together, but sometimes they split in 2 or 3 groups and later reunite. Due to the low opacity, depending on how many curves overlap the result is brighter or darker." loading="lazy" /></figure>
  <footer>
     â€” aBe (@hamoid@genart.social) <a href="https://genart.social/@hamoid/115125620138280715"><time datetime="2025-08-31T21:59:13.000Z">8/31/2025, 5:59:13 PM</time></a>
  </footer>
</blockquote>

<p>The drawing is made by choosing 10 random points, drawing a curve through
those points, then slightly scooching the points and drawing another curve.
There are 40 curves, each slightly different than the last.  Occasionally
the next curve makes a jump, which is why they separate and reunite.</p>

<p>Eventually I made something similar:</p>

<figurep>
    <img class="hairline"
        src="pix/fluidity/repro_139.png"
        alt="An image similar to the one from Mastodon, with smoky sinuous curves"
    />
</figurep>

<p>Along the way I had to learn about three techniques I got from the Kotlin
code: Hobby curves, Hilbert sorting, and simplex noise.</p>

<p>Each of these algorithms tries to do something "natural" automatically, so
that we can generate art that looks nice without any manual steps.</p>


<h1>Hobby curves</h1>

<p>To draw swoopy curves through our random points, we use an algorithm
developed by John Hobby as part of Donald Knuth's Metafont type design system.
Jake Low has a <a urlid="hobby">great interactive page for playing with Hobby
curves</a>, you should try it.</p>

<p>Here are three examples of Hobby curves through ten random points:</p>

<figurep>
    <img class="hairline" scale="0.5"
        src="pix/fluidity/hobby_unsorted.png"
        alt="Red random points connected by green lines then with a curve through all ten."
    />
</figurep>

<p>The curves are nice, but kind of a scribble, because we're joining points
together in the order we generated them (shown by the green lines).  If you
asked a person to connect random points, they wouldn't jump back and forth
across the canvas like this.  They would find a nearby point to use next,
producing a more natural tour of the set.</p>

<p>We're generating everything automatically, so we can't manually intervene
to choose a natural order for the points.  Instead we use Hilbert sorting.</p>


<h1>Hilbert sorting</h1>

<p>The Hilbert space-filling fractal visits every square in a 2D grid.
<a urlid="hilbertsort">Hilbert sorting</a> uses a Hilbert fractal traversing
the canvas, and sorts the points by when their square is visited by the fractal.
This gives a tour of the points that corresponds more closely to what people
expect.  Points that are close together in space are likely (but not guaranteed)
to be close in the ordering.</p>

<p>If we sort the points using Hilbert sorting, we get much nicer curves. Here
are the same points as last time:</p>

<figurep>
    <img class="hairline" scale="0.5"
        src="pix/fluidity/hobby_sorted.png"
        alt="The same three examples of ten points, but the curves make more sense now"
    />
</figurep>

<p>Here are pairs of the same points, unsorted and sorted side-by-side:</p>

<figurep>
    <img class="hairline" scale="0.5"
        src="pix/fluidity/hilbert_compared.png"
        alt="Comparing the scribbles and the nice curves"
    />
</figurep>

<p>If you compare closely, the points in each pair are the same, but the sorted
points are connected in a better order, producing nicer curves.</p>


<h1>Simplex noise</h1>

<p>Choosing random points would be easy to do with a random number generator,
but we want the points to move in interesting graceful ways.  To do that, we use
simplex noise. This is a 2D function (let's call the inputs u and v) that
produces a value from -1 to 1.  The important thing is the function is
continuous: if you sample it at two (u,v) coordinates that are close together,
the results will be close together.  But it's also random: the continuous curves
you get are wavy in unpredictable ways.  Think of the simplex noise function as
a smooth hilly landscape.</p>

<p>To get an (x,y) point for our drawing, we choose a (u,v) coordinate to
produce an x value and a completely different (u,v) coordinate for the y.  To
get the next (x,y) point, we keep the u values the same and change the v values by
just a tiny bit.  That makes the (x,y) points move smoothly but interestingly.</p>

<p>Here are the trails of four points taking 50 steps using this scheme:</p>

<figurep>
    <img class="hairline"
        src="pix/fluidity/point_motion.png"
        alt="Four trails of red dots showing how the randomness creates unpredictable but interesting paths"
    />
</figurep>

<p>If we use seven points taking five steps, and draw curves through the seven
points at each step, we get examples like this:</p>

<figurep>
    <img class="hairline" scale="0.5"
        src="pix/fluidity/small_runs.png"
        alt="Drawing curves through the points, widely spaced to show the construction"
    />
</figurep>

<p>I've left the points visible, and given them large steps so the lines are
very widely spaced to show the motion.  Taking out the points and drawing more
lines with smaller steps gives us this:</p>

<figurep>
    <img class="hairline" scale="0.5"
        src="pix/fluidity/large_runs.png"
        alt="More lines to move toward the look we want"
    />
</figurep>

<p>With 40 lines drawn wider with some transparency, we start to see the smoky
fluidity:</p>

<figurep>
    <img class="hairline" scale="0.5"
        src="pix/fluidity/larger_runs.png"
        alt="Now we're getting the original effect"
    />
</figurep>


<h1>Jumps</h1>

<p>In his Mastodon post, aBe commented on the separating of the lines as one of
the things he liked about this. But why do they do that?  If we are moving the
points in small increments, why do the curves sometimes make large jumps?</p>

<p>The first reason is because of Hobby curves.  They do a great job drawing a
curve through a set of points as a person might.  But a downside of the
algorithm is sometimes changing a point a small amount makes the entire curve
take a different route. If you play around with the interactive examples on
<a urlid="hobby">Jake Low's page</a> you will see the curve can unexpectedly
take a different shape.</p>

<p>As we inch our points along, sometimes the Hobby curve jumps.</p>

<p>The second reason is due to Hilbert sorting.  Each of our lines is sorted
independently of how the previous line was sorted.  If a point's small motion
moves it into a different grid square, it can change the sorting order, which
changes the Hobby curve even more.</p>

<p>If we sort the first line, and then keep that order of points for all the
lines, the result has fewer jumps, but the Hobby curves still act
unpredictably:</p>

<figurep>
    <img class="hairline" scale="0.5"
        src="pix/fluidity/first_line_runs.png"
        alt="The same two sets of points as the last figure. Fewer jumps, but still with some discontinuities"
    />
</figurep>


<h1>Colophon</h1>

<p>This was all done with Python, using other people's implementations of the
hard parts:
<a href="https://github.com/ltrujello/Hobby_Curve_Algorithm/blob/main/python/hobby.py">hobby.py</a>,
<a href="https://pypi.org/project/hilbertcurve/">hilbertcurve</a>, and
<a href="https://pypi.org/project/super-simplex/">super-simplex</a>.  My code
is on GitHub
(<a href="https://github.com/nedbat/fluidity">nedbat/fluidity</a>), but it's a
mess.  Think of it as a woodworking studio with half-finished pieces and wood
chips strewn everywhere.</p>

<p>A lot of the learning and experimentation was in
<a href="https://github.com/nedbat/fluidity/blob/main/play.ipynb">my Jupyter
notebook</a>.  Part of the process for work like this is playing around with
different values of tweakable parameters and seeds for the random numbers to get
the effect you want, either artistic or pedagogical. The notebook shows some of
the thumbnail galleries I used to pick the examples to show.</p>

<p>I went on to play with animations, which led to other learnings, but those
will have to wait for another blog post.
<b>Update:</b> I animated these in <a pref="blog/natural-cubics-circular-simplex.bx" />.
</p>

<url id="hobby" href="https://www.jakelow.com/blog/hobby-curves" />
<url id="hilbertsort" href="https://doc.cgal.org/latest/Spatial_sorting/index.html" />

</body>
</entry>
</blog>
