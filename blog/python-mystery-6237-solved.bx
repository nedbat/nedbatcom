<?xml version='1.0' encoding='utf-8'?>
<blog>
<entry when='20081019T135646'>
<title>Python mystery #6237: solved</title>
<category>python</category>
<body>
<p>I was refactoring some code today, and couldn't figure out why my simple textbook
change was making code break, until I relearned a subtlety of Python.
</p>

<p>The code looked like this:</p>

<code lang='python'><![CDATA[
def __eq__(self, other):
    # Compare the parts, but be clever when comparing the specs.
    if self.__class__ != other.__class__:
        return False
    return self.spec.make_div_only() == other.spec.make_div_only() and self.chunks == other.chunks
]]></code>

<p>I didn't like that long last line, so I made the simple change to this:</p>

<code lang='python'><![CDATA[
def __eq__(self, other):
    # Compare the parts, but be clever when comparing the specs.
    if self.__class__ != other.__class__:
        return False
    if self.spec.make_div_only() != other.spec.make_div_only():
        return False
    return self.chunks == other.chunks
]]></code>

<p>and ran my unit tests, and they failed.  What!?  How could doing a simple
boolean refactoring cause breakage?  I scratched my head, re-read the lines,
questioned my understanding of the short-circuit nature of the <c>and</c>
operator, and so on.  The usual "am I going crazy?" debugging techniques.</p>

<p>Undoing the refactor made the tests work again, I changed it again to the
shorter lines, and the tests failed again.   Adding some print statements to see
the actual values being compared, I realized that the result of <c>make_div_only</c>
is an object (of class Spec), and that object defines its own <c>Spec.__eq__</c> method
to define the meaning of the <c>==</c> operator for its instances.</p>

<p>Then it hit me: the class doesn't define a <c>__ne__</c> method.
My refactoring changed the operator from == to !=, the first was overridden to
provide custom semantics, but the second was not, so simple object inequality was
being checked, so <c>make_div_only</c> inequality test was always
true, and the method incorrectly always returned False.</p>

<p>The <a href='http://www.python.org/doc/2.5.2/ref/customization.html'>Python docs</a>
are clear on this point:</p>

<quote><p>There are no implied relationships among the comparison operators.
The truth of x==y does not imply that x!=y is false.
Accordingly, when defining __eq__(), one should also define __ne__() so that the
operators will behave as expected.</p></quote>

<p>Adding a <c>__ne__</c> method to my Spec class made everything
work properly:</p>

<code lang='python'><![CDATA[
def __ne__(self, other):
    return not self.__eq__(other)
]]></code>

</body>
</entry>
</blog>
