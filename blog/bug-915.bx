<?xml version='1.0' encoding='utf-8'?>
<blog>
<entry when='20200112T101752'>
<title>Bug #915: please help!</title>
<category>coverage</category>
<category>help</category>
<body>

<p><b><i>Updated:</i></b> this was solved on Hacker News. Details in
<a href="/blog/202001/bug_915_solved.html">Bug #915: solved!</a>
</p>

<p>I just released coverage.py 5.0.3, with two bug fixes.  There was another bug
I really wanted to fix, but it has stumped me.  I'm hoping someone can figure it
out.</p>

<p><a href="https://github.com/nedbat/coveragepy/issues/915">Bug #915</a>
describes a disk I/O failure.  Thanks to some help from Travis support, Chris
Caron has provided instructions for reproducing it in Docker, and they work: I
can generate disk I/O errors at will.  What I can't figure out is what
coverage.py is doing wrong that causes the errors.</p>

<p>To reproduce it, start a Travis-based docker image:</p>

<code lang='bash'><![CDATA[
cid=$(docker run -dti --privileged=true --entrypoint=/sbin/init \
    -v /sys/fs/cgroup:/sys/fs/cgroup:ro \
    travisci/ci-sardonyx:packer-1542104228-d128723)
docker exec -it $cid /bin/bash
]]></code>

<p>Then in the container, run these commands:</p>

<code lang='bash'><![CDATA[
su - travis
git clone --branch=nedbat/debug-915 https://github.com/nedbat/apprise-api.git
cd apprise-api
source ~/virtualenv/python3.6/bin/activate
pip install tox
tox -e bad,good
]]></code>

<p>This will run two tox environments, called <b>good</b> and <b>bad</b>.  Bad
will fail with a disk I/O error, good will succeed.  The difference is that bad
uses the pytest-cov plugin, good does not.  Two detailed debug logs will be
created: debug-good.txt and debug-bad.txt.  They show what operations were
executed in the SqliteDb class in coverage.py.</p>

<p>The Big Questions: Why does bad fail? What is it doing at the SQLite level
that causes the failure? And most importantly, what can I change in coverage.py
to prevent the failure?</p>

<p>Some observations and questions:</p>

<ul>

<li>If I change the last line of the steps to "tox -e good,bad" (that is, run
the environments in the other order) then the error doesn't happen. I don't
understand why that would make a difference.</li>

<li>I've tried adding time.sleep's to try to slow the pace of database access,
but maybe in not enough places? And if this fixes it, what's the right way to
productize that change?</li>

<li>I've tried using the detailed debug log to create a small Python program
that in theory accesses the SQLite database in exactly the same way, but I
haven't managed to create the error that way.  What aspect of access am I
overlooking?</li>

</ul>

<p>If you come up with answers to any of these questions, I will reward you
somehow. I am also eager to chat if that would help you solve the mysteries.
I can be reached on <a href="mailto:ned@nedbatchelder.com">email</a>,
<a href='http://twitter.com/nedbat'>Twitter</a>,
as <a href='irc://irc.libera.chat/#python'>nedbat on IRC</a>,
or in <a href="https://about.bostonpython.com/slack">Slack</a>. Please get in
touch if you have any ideas. Thanks.</p>

</body>
</entry>


<entry when='20200113T061500'>
<title>Bug #915: solved!</title>
<category>debugging</category>
<body>

<p>Yesterday I pleaded,
<a href="/blog/202001/bug_915_please_help.html">Bug #915: please help!</a>
It got posted to
<a href="https://news.ycombinator.com/item?id=22028581">Hacker News</a>,
where Robert Xiao (nneonneo) did some impressive debugging and
<a href="https://news.ycombinator.com/item?id=22031494">found the answer</a>.
</p>

<p>The user's code used mocks to simulate an OSError when trying to make
temporary files
(<a href="https://github.com/caronc/apprise-api/blob/90ead45abd168112599f4a258019b733622659a0/apprise_api/api/tests/test_add.py#L165-L166">source</a>):</p>

<code lang='python'><![CDATA[
with patch('tempfile._TemporaryFileWrapper') as mock_ntf:
    mock_ntf.side_effect = OSError()
]]></code>

<p>Inside tempfile.NamedTemporaryFile, the error handling misses the possibility
that _TemporaryFileWrapper will fail
(<a href="https://github.com/python/cpython/blob/09c482fad11c769be38b2449f1056e264b701bb7/Lib/tempfile.py#L541-L550">source</a>):</p>

<code lang='python'><![CDATA[
(fd, name) = _mkstemp_inner(dir, prefix, suffix, flags, output_type)
try:
    file = _io.open(fd, mode, buffering=buffering,
                    newline=newline, encoding=encoding, errors=errors)

    return _TemporaryFileWrapper(file, name, delete)
except BaseException:
    _os.unlink(name)
    _os.close(fd)
    raise
]]></code>

<p>If _TemporaryFileWrapper fails, the file descriptor fd is closed, but the
file object referencing it still exists.  Eventually, it will be garbage
collected, and the file descriptor it references will be closed again.</p>

<p>But file descriptors are just small integers which will be reused.  The
failure in bug 915 is that the file descriptor did get reused, by SQLite.  When
the garbage collector eventually reclaimed the file object leaked by
NamedTemporaryFile, it closed a file descriptor that SQLite was using. Boom.</p>

<p>There are two improvements to be made here. First, the user code should be
mocking public functions, not internal details of the Python stdlib. In
fact, the variable is already named mock_ntf as if it had been a mock of
NamedTemporaryFile at some point.</p>

<p>NamedTemporaryFile would be a better mock because that is the function being
used by the user's code.  Mocking _TemporaryFileWrapper is relying on an
internal detail of the standard library.</p>

<p>The other improvement is to close the leak in NamedTemporaryFile.
That request is now <a href="https://bugs.python.org/issue39318">bpo39318</a>.
As it happens, the leak had also been reported as
<a href="https://bugs.python.org/issue21058">bpo21058</a> and
<a href="https://bugs.python.org/issue26385">bpo26385</a>.</p>

<p>Lessons learned:</p>

<ul>

<li>Hacker News can be helpful, in spite of the tangents about shell
redirection, authorship attribution, and GitHub monoculture.</li>

<li>There are always people more skilled at debugging. I had no idea you could
<a href="https://news.ycombinator.com/item?id=22031219">script gdb</a>.</li>

<li>Error handling is hard to get right. Edge cases can be really subtle.
Bugs can linger for years.</li>

</ul>

<p>I named Robert Xiao at the top, but lots of people chipped in effort to help
get to the bottom of this. ikanobori posted it to Hacker News in the first
place. Chris Caron reported the original #915 and stuck with the process as it
dragged on. Thanks everybody.</p>

</body>
</entry>

</blog>
