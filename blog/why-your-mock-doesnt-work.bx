<?xml version='1.0' encoding='utf-8'?>
<blog>
<entry when='20190802T141500'>
<title>Why your mock doesn't work</title>
<category>python</category>
<category>testing</category>

<description>
Mocking is a powerful technique for isolating tests.  But yours isn't working.  Why!?
</description>
<img src="pix/cards/mock_doesnt_work.png" alt="A diagram of two modules with references, and a bad mock"/>

<body>

<!--[[[cog
    from cupid.pyfig import PyFig

    def start_figure(unit=15, title=None, **kwargs):
        fig = PyFig(unit=unit, title=title, name_shape='tag', draw_grid=False, **kwargs)
        return fig

    def finish_figure(fig):
        cog.outl(fig.tostring())
]]]-->
<!--[[[end]]]-->

<p><a href='https://docs.python.org/3/library/unittest.mock.html'>Mocking</a> is
a powerful technique for isolating tests from undesired interactions among
components.  But often people find their mock isn't taking effect, and it's not
clear why.  Hopefully this explanation will clear things up.</p>

<p>BTW: it's really easy to over-use mocking.  These are good explanations of
alternative approaches:</p>

<ul>

<li>Augie Fackler and Nathaniel Manista's PyCon talk
<a pref='blog/tldw-stop-mocking-start-testing.bx'>Stop Mocking and Start
Testing</a>.</li>

<li>Itamar Turner-Trauring's article
<a href='https://pythonspeed.com/articles/verified-fakes/'>Fast tests for slow
services: why you should use verified fakes</a>.</li>

</ul>


<h1>A quick aside about assignment</h1>

<p>Before we get to fancy stuff like mocks, I want to review a little bit about
Python assignment.  You may already know this, but bear with me.  Everything
that follows is going to be directly related to this simple example.</p>

<p>Variables in Python are names that refer to values. If we assign a second
name, the names don't refer to each other, they both refer to the same value.
If one of the names is then assigned again, the other name isn't affected:</p>

<figurep>
    <!--[[[cog
    fig = start_figure()
    fig.top_code("x = 23")
    x = fig.auto_name("x")
    c = fig.int(pos=fig.val_for_name(x), text="23")
    fig.reference(x, c)
    finish_figure(fig)
    ]]]-->
    <svg baseProfile="full" height="65.5" version="1.1" viewBox="0 0 116.0 65.5" width="116.0" xmlns="http://www.w3.org/2000/svg" xmlns:ev="http://www.w3.org/2001/xml-events" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><marker class="arrowend" id="id1" markerHeight="10" markerWidth="10" orient="auto" refX="10" refY="5" viewBox="0,0,10,10"><path d="M 0,0 L 10,5 L 0,10 L 1,5 z" /></marker></defs><g transform="translate(-81.0,-4.0)"><polygon class="name" points="83,37.5 115,37.5 120,52.5 115,67.5 83,67.5" /><text dy=".3em" text-anchor="middle" x="99.625" y="52.5">x</text><circle class="int value" cx="180" cy="52.5" r="15" /><text dy=".3em" text-anchor="middle" x="180" y="52.5">23</text><path class="arrow" d="M 120,52 C 131,52 131,52 142,52 C 153,52 153,52 165,52" fill="none" marker-end="url(#id1)" /><text class="top_code" dy=".3em" text-anchor="middle" x="139" y="15">x = 23</text></g></svg>
    <!--[[[end]]]-->
    <!--[[[cog
    fig = start_figure()
    fig.top_code("y = x")
    n_x = fig.auto_name("x")
    n_y = fig.auto_name("y")
    c_23 = (n_x.cy + n_y.cy) / 2
    i_23 = fig.int(left=(fig.val_left, c_23), text="23")
    fig.reference(n_x, i_23, scooch=-.25)
    fig.reference(n_y, i_23, scooch=.25)
    finish_figure(fig)
    ]]]-->
    <svg baseProfile="full" height="110.5" version="1.1" viewBox="0 0 116.0 110.5" width="116.0" xmlns="http://www.w3.org/2000/svg" xmlns:ev="http://www.w3.org/2001/xml-events" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><marker class="arrowend" id="id2" markerHeight="10" markerWidth="10" orient="auto" refX="10" refY="5" viewBox="0,0,10,10"><path d="M 0,0 L 10,5 L 0,10 L 1,5 z" /></marker></defs><g transform="translate(-81.0,-4.0)"><polygon class="name" points="83,37.5 115,37.5 120,52.5 115,67.5 83,67.5" /><text dy=".3em" text-anchor="middle" x="99.625" y="52.5">x</text><polygon class="name" points="83,82.5 115,82.5 120,97.5 115,112.5 83,112.5" /><text dy=".3em" text-anchor="middle" x="99.625" y="97.5">y</text><circle class="int value" cx="180" cy="75" r="15" /><text dy=".3em" text-anchor="middle" x="180" y="75">23</text><path class="arrow" d="M 120,52 C 132,52 132,52 142,59 C 153,66 153,66 165,71" fill="none" marker-end="url(#id2)" /><path class="arrow" d="M 120,97 C 132,97 132,97 142,90 C 153,83 153,83 165,78" fill="none" marker-end="url(#id2)" /><text class="top_code" dy=".3em" text-anchor="middle" x="139" y="15">y = x</text></g></svg>
    <!--[[[end]]]-->
    <!--[[[cog
    fig = start_figure()
    fig.top_code("x = 12")
    n_x = fig.auto_name("x")
    n_y = fig.auto_name("y")
    i_12 = fig.int(pos=fig.val_for_name(n_x), text="12")
    i_23 = fig.int(pos=fig.val_for_name(n_y), text="23")
    fig.reference(n_x, i_12)
    fig.reference(n_y, i_23)
    finish_figure(fig)
    ]]]-->
    <svg baseProfile="full" height="110.5" version="1.1" viewBox="0 0 116.0 110.5" width="116.0" xmlns="http://www.w3.org/2000/svg" xmlns:ev="http://www.w3.org/2001/xml-events" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><marker class="arrowend" id="id3" markerHeight="10" markerWidth="10" orient="auto" refX="10" refY="5" viewBox="0,0,10,10"><path d="M 0,0 L 10,5 L 0,10 L 1,5 z" /></marker></defs><g transform="translate(-81.0,-4.0)"><polygon class="name" points="83,37.5 115,37.5 120,52.5 115,67.5 83,67.5" /><text dy=".3em" text-anchor="middle" x="99.625" y="52.5">x</text><polygon class="name" points="83,82.5 115,82.5 120,97.5 115,112.5 83,112.5" /><text dy=".3em" text-anchor="middle" x="99.625" y="97.5">y</text><circle class="int value" cx="180" cy="52.5" r="15" /><text dy=".3em" text-anchor="middle" x="180" y="52.5">12</text><circle class="int value" cx="180" cy="97.5" r="15" /><text dy=".3em" text-anchor="middle" x="180" y="97.5">23</text><path class="arrow" d="M 120,52 C 131,52 131,52 142,52 C 153,52 153,52 165,52" fill="none" marker-end="url(#id3)" /><path class="arrow" d="M 120,97 C 131,97 131,97 142,97 C 153,97 153,97 165,97" fill="none" marker-end="url(#id3)" /><text class="top_code" dy=".3em" text-anchor="middle" x="139" y="15">x = 12</text></g></svg>
    <!--[[[end]]]-->
</figurep>

<p>If this is unfamiliar to you, or you just want to look at more pictures like
this, <a pref='text/names1.px'/> goes into much more depth about the semantics
of Python assignment.</p>


<h1>Importing</h1>

<p>Let's say we have a simple module like this:</p>

<code lang="python"><![CDATA[
# mod.py

val = "original"

def update_val():
    global val
    val = "updated"
]]></code>

<p>We want to use val from this module, and also call update_val to change val.
There are two ways we could try to do it.  At first glance, it seems like they
would do the same thing.</p>

<p>The first version imports the names we want, and uses them:</p>

<code lang="python"><![CDATA[
# code1.py

from mod import val, update_val

print(val)
update_val()
print(val)
]]></code>

<p>The second version imports the module, and uses the names as attributes on
the module object:</p>

<code lang="python"><![CDATA[
# code2.py

import mod

print(mod.val)
mod.update_val()
print(mod.val)
]]></code>

<p>This seems like a subtle distinction, almost a stylistic choice.  But
code1.py prints "original original": the value hasn't changed!  Code2.py does
what we expected: it prints "original updated."  Why the difference?</p>

<!--[[[cog
MOD_WIDTH = 100
MOD_LEFT = MOD_WIDTH + 25

def from_mod_figure(frame_num):
    fig = start_figure(frame_num=frame_num)

    m_mod = fig.module(size=(MOD_WIDTH,160), n_names=1, text="mod.py")
    n_val = fig.auto_name("val")
    n_hidden = fig.auto_name("", rise=99)
    s_first = fig.string(pos=fig.val_for_name(n_val), size=(85,30), text=repr("original"))
    s_second = fig.string(pos=fig.val_for_name(n_hidden), size=(90,30), text=repr("updated"), rise=2)

    if frame_num == 1:
        fig.reference(n_val, s_first)
    else:
        fig.reference(n_val, s_second, scooch=-.15)
    fig.end_module()

    pos = ('topleft', (m_mod.left - MOD_LEFT, m_mod.bottom))
    fig.module(pos=pos, size=(MOD_WIDTH,160), n_names=1, text="code1.py")
    n_val2 = fig.auto_name("val")
    fig.reference(n_val2, s_first, scooch=.5)
    fig.end_module()

    finish_figure(fig)
]]]-->
<!--[[[end]]]-->

<p>Let's look at code1.py more closely:</p>

<code lang="python"><![CDATA[
# code1.py

from mod import val, update_val

print(val)
update_val()
print(val)
]]></code>

<p>After "from mod import val", when we first print val, we have this:</p>

<figurep>
    <!--[[[cog
    from_mod_figure(1)
    ]]]-->
    <svg baseProfile="full" height="154.0" version="1.1" viewBox="0 0 349.0 154.0" width="349.0" xmlns="http://www.w3.org/2000/svg" xmlns:ev="http://www.w3.org/2001/xml-events" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><marker class="arrowend" id="id4" markerHeight="10" markerWidth="10" orient="auto" refX="10" refY="5" viewBox="0,0,10,10"><path d="M 0,0 L 10,5 L 0,10 L 1,5 z" /></marker></defs><g transform="translate(92.0,-13.0)"><rect class="module" height="75" rx="6" ry="6" width="100" x="35" y="15" /><text class="modulelabel" dy=".3em" opacity="1" text-anchor="middle" x="85" y="30">mod.py</text><polygon class="name" points="71,45 115,45 120,60 115,75 71,75" /><text dy=".3em" text-anchor="middle" x="93.625" y="60">val</text><rect class="string value" height="30" rx="15" ry="15" width="85" x="165" y="45" /><text dy=".3em" text-anchor="middle" x="207.5" y="60">'original'</text><path class="arrow" d="M 120,60 C 131,60 131,60 142,60 C 153,60 153,60 165,60" fill="none" marker-end="url(#id4)" /><rect class="module" height="75" rx="6" ry="6" width="100" x="-90" y="90" /><text class="modulelabel" dy=".3em" opacity="1" text-anchor="middle" x="-40" y="105">code1.py</text><polygon class="name" points="-54,120 -10,120 -5,135 -10,150 -54,150" /><text dy=".3em" text-anchor="middle" x="-31.375" y="135">val</text><path class="arrow" d="M -5,135 C 40,135 43,133 86,117 C 129,101 132,99 165,67" fill="none" marker-end="url(#id4)" /></g></svg>
    <!--[[[end]]]-->
</figurep>

<p>"from mod import val" means, import mod, and then do the assignment "val =
mod.val".  This makes our name val refer to the same object as mod's name
val.</p>

<p>After "update_val()", when we print val again, our world looks like this:</p>

<figurep>
    <!--[[[cog
    from_mod_figure(2)
    ]]]-->
    <svg baseProfile="full" height="154.0" version="1.1" viewBox="0 0 349.0 154.0" width="349.0" xmlns="http://www.w3.org/2000/svg" xmlns:ev="http://www.w3.org/2001/xml-events" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><marker class="arrowend" id="id5" markerHeight="10" markerWidth="10" orient="auto" refX="10" refY="5" viewBox="0,0,10,10"><path d="M 0,0 L 10,5 L 0,10 L 1,5 z" /></marker></defs><g transform="translate(92.0,-13.0)"><rect class="module" height="75" rx="6" ry="6" width="100" x="35" y="15" /><text class="modulelabel" dy=".3em" opacity="1" text-anchor="middle" x="85" y="30">mod.py</text><polygon class="name" points="71,45 115,45 120,60 115,75 71,75" /><text dy=".3em" text-anchor="middle" x="93.625" y="60">val</text><rect class="string value" height="30" rx="15" ry="15" width="85" x="165" y="45" /><text dy=".3em" text-anchor="middle" x="207.5" y="60">'original'</text><rect class="string value" height="30" rx="15" ry="15" width="90" x="165" y="90" /><text dy=".3em" text-anchor="middle" x="210" y="105">'updated'</text><path class="arrow" d="M 120,60 C 135,60 137,65 142,79 C 148,94 149,99 165,102" fill="none" marker-end="url(#id5)" /><rect class="module" height="75" rx="6" ry="6" width="100" x="-90" y="90" /><text class="modulelabel" dy=".3em" opacity="1" text-anchor="middle" x="-40" y="105">code1.py</text><polygon class="name" points="-54,120 -10,120 -5,135 -10,150 -54,150" /><text dy=".3em" text-anchor="middle" x="-31.375" y="135">val</text><path class="arrow" d="M -5,135 C 40,135 43,133 86,117 C 129,101 132,99 165,67" fill="none" marker-end="url(#id5)" /></g></svg>
    <!--[[[end]]]-->
</figurep>

<p>update_val has reassigned mod's val, but that has no effect on our val.  This
is the same behavior as our x and y example, but with imports instead of more
obvious assignments.  In code1.py, "from mod import val" is an assignment from
mod.val to val, and works exactly like "y = x" does. Later assignments to
mod.val don't affect our val, just as later assignments to x don't affect y.</p>

<!--[[[cog
def import_mod_figure(frame_num):
    fig = start_figure(frame_num=frame_num)

    m_mod = fig.module(size=(MOD_WIDTH,160), n_names=1, text="mod.py")
    n_val = fig.auto_name("val")
    n_hidden = fig.auto_name("", rise=99)
    s_first = fig.string(pos=fig.val_for_name(n_val), size=(85,30), text=repr("original"), fade=1, set=2)
    s_second = fig.string(pos=fig.val_for_name(n_hidden), size=(90,30), text=repr("updated"), rise=2)

    if frame_num == 1:
        fig.reference(n_val, s_first)
    else:
        fig.reference(n_val, s_second, scooch=-.15)
    fig.end_module()

    pos = ('topleft', (m_mod.left - MOD_LEFT, m_mod.bottom))
    fig.module(pos=pos, size=(MOD_WIDTH,160), n_names=1, text="code2.py")
    n_mod = fig.auto_name("mod")
    fig.reference(n_mod, m_mod)
    fig.end_module()

    finish_figure(fig)
]]]-->
<!--[[[end]]]-->

<p>Now let's look at code2.py again:</p>

<code lang="python"><![CDATA[
# code2.py

import mod

print(mod.val)
mod.update_val()
print(mod.val)
]]></code>

<p>The "import mod" statement means, make my name mod refer to the entire mod
module. Accessing mod.val will reach into the mod module, find its val name, and
use its value.</p>

<figurep>
    <!--[[[cog
    import_mod_figure(1)
    ]]]-->
    <svg baseProfile="full" height="154.0" version="1.1" viewBox="0 0 349.0 154.0" width="349.0" xmlns="http://www.w3.org/2000/svg" xmlns:ev="http://www.w3.org/2001/xml-events" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><marker class="arrowend" id="id6" markerHeight="10" markerWidth="10" orient="auto" refX="10" refY="5" viewBox="0,0,10,10"><path d="M 0,0 L 10,5 L 0,10 L 1,5 z" /></marker></defs><g transform="translate(92.0,-13.0)"><rect class="module" height="75" rx="6" ry="6" width="100" x="35" y="15" /><text class="modulelabel" dy=".3em" opacity="1" text-anchor="middle" x="85" y="30">mod.py</text><polygon class="name" points="71,45 115,45 120,60 115,75 71,75" /><text dy=".3em" text-anchor="middle" x="93.625" y="60">val</text><rect class="string value" height="30" rx="15" ry="15" width="85" x="165" y="45" /><text dy=".3em" text-anchor="middle" x="207.5" y="60">'original'</text><path class="arrow" d="M 120,60 C 131,60 131,60 142,60 C 153,60 153,60 165,60" fill="none" marker-end="url(#id6)" /><rect class="module" height="75" rx="6" ry="6" width="100" x="-90" y="90" /><text class="modulelabel" dy=".3em" opacity="1" text-anchor="middle" x="-40" y="105">code2.py</text><polygon class="name" points="-62,120 -10,120 -5,135 -10,150 -62,150" /><text dy=".3em" text-anchor="middle" x="-35.375" y="135">mod</text><path class="arrow" d="M -5,135 C 17,135 16,116 15,93 C 13,70 12,52 35,52" fill="none" marker-end="url(#id6)" /></g></svg>
    <!--[[[end]]]-->
</figurep>

<p>Then after "update_val()", mod's name val has been changed:</p>

<figurep>
    <!--[[[cog
    import_mod_figure(2)
    ]]]-->
    <svg baseProfile="full" height="154.0" version="1.1" viewBox="0 0 349.0 154.0" width="349.0" xmlns="http://www.w3.org/2000/svg" xmlns:ev="http://www.w3.org/2001/xml-events" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><marker class="arrowend" id="id7" markerHeight="10" markerWidth="10" orient="auto" refX="10" refY="5" viewBox="0,0,10,10"><path d="M 0,0 L 10,5 L 0,10 L 1,5 z" /></marker></defs><g transform="translate(92.0,-13.0)"><rect class="module" height="75" rx="6" ry="6" width="100" x="35" y="15" /><text class="modulelabel" dy=".3em" opacity="1" text-anchor="middle" x="85" y="30">mod.py</text><polygon class="name" points="71,45 115,45 120,60 115,75 71,75" /><text dy=".3em" text-anchor="middle" x="93.625" y="60">val</text><rect class="string value" height="30" opacity="0.25" rx="15" ry="15" width="85" x="165" y="45" /><text dy=".3em" opacity="0.25" text-anchor="middle" x="207.5" y="60">'original'</text><rect class="string value" height="30" rx="15" ry="15" width="90" x="165" y="90" /><text dy=".3em" text-anchor="middle" x="210" y="105">'updated'</text><path class="arrow" d="M 120,60 C 135,60 137,65 142,79 C 148,94 149,99 165,102" fill="none" marker-end="url(#id7)" /><rect class="module" height="75" rx="6" ry="6" width="100" x="-90" y="90" /><text class="modulelabel" dy=".3em" opacity="1" text-anchor="middle" x="-40" y="105">code2.py</text><polygon class="name" points="-62,120 -10,120 -5,135 -10,150 -62,150" /><text dy=".3em" text-anchor="middle" x="-35.375" y="135">mod</text><path class="arrow" d="M -5,135 C 17,135 16,116 15,93 C 13,70 12,52 35,52" fill="none" marker-end="url(#id7)" /></g></svg>
    <!--[[[end]]]-->
</figurep>

<p>Now we print mod.val again, and see its updated value, just as we expected.</p>


<h1>OK, but what about mocks?</h1>

<p>Mocking is a fancy kind of assignment: replace an object (or function) with
a different one.  We'll use the
<a href='https://docs.python.org/3/library/unittest.mock.html#unittest.mock.patch'>mock.patch</a>
function in a with statement.  It makes a mock object, assigns it to the name
given, and then restores the original value at the end of the with
statement.</p>

<p>Let's consider this (very roughly sketched) product code and test:</p>

<code lang="python"><![CDATA[
# product.py

from os import listdir

def my_function():
    files = listdir(some_directory)
    # ... use the file names ...
]]></code>

<code lang="python"><![CDATA[
# test.py

def test_it():
    with mock.patch("os.listdir") as listdir:
        listdir.return_value = ['a.txt', 'b.txt', 'c.txt']
        my_function()
]]></code>

<!--[[[cog
def os_figure(frame_num):
    fig = start_figure(frame_num=frame_num)

    m_mod = fig.module(size=(MOD_WIDTH,160), n_names=1, text="os module")
    n_listdir = fig.auto_name("listdir")
    n_hidden = fig.auto_name("", rise=99)
    s_fn = fig.string(pos=fig.val_for_name(n_listdir), size=(90,30), text="listdir()")
    s_mock = fig.string(pos=fig.val_for_name(n_hidden), size=(90,30), text="mock!", rise=2)

    if frame_num == 1:
        fig.reference(n_listdir, s_fn)
    else:
        fig.reference(n_listdir, s_mock, scooch=-.15)
    fig.end_module()

    pos = ('topleft', (m_mod.left - MOD_LEFT, m_mod.bottom))
    fig.module(pos=pos, size=(MOD_WIDTH,160), n_names=1, text="product.py")
    n_listdir2 = fig.auto_name("listdir")
    fig.reference(n_listdir2, s_fn, scooch=.5)
    fig.end_module()

    finish_figure(fig)
]]]-->
<!--[[[end]]]-->

<p>After we've imported product.py, both the os module and product.py have a
name "listdir" which refers to the built-in listdir() function. The references
look like this:</p>

<figurep>
    <!--[[[cog
    os_figure(1)
    ]]]-->
    <svg baseProfile="full" height="154.0" version="1.1" viewBox="0 0 349.0 154.0" width="349.0" xmlns="http://www.w3.org/2000/svg" xmlns:ev="http://www.w3.org/2001/xml-events" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><marker class="arrowend" id="id8" markerHeight="10" markerWidth="10" orient="auto" refX="10" refY="5" viewBox="0,0,10,10"><path d="M 0,0 L 10,5 L 0,10 L 1,5 z" /></marker></defs><g transform="translate(92.0,-13.0)"><rect class="module" height="75" rx="6" ry="6" width="100" x="35" y="15" /><text class="modulelabel" dy=".3em" opacity="1" text-anchor="middle" x="85" y="30">os module</text><polygon class="name" points="54,45 115,45 120,60 115,75 54,75" /><text dy=".3em" text-anchor="middle" x="85.125" y="60">listdir</text><rect class="string value" height="30" rx="15" ry="15" width="90" x="165" y="45" /><text dy=".3em" text-anchor="middle" x="210" y="60">listdir()</text><path class="arrow" d="M 120,60 C 131,60 131,60 142,60 C 153,60 153,60 165,60" fill="none" marker-end="url(#id8)" /><rect class="module" height="75" rx="6" ry="6" width="100" x="-90" y="90" /><text class="modulelabel" dy=".3em" opacity="1" text-anchor="middle" x="-40" y="105">product.py</text><polygon class="name" points="-71,120 -10,120 -5,135 -10,150 -71,150" /><text dy=".3em" text-anchor="middle" x="-39.875" y="135">listdir</text><path class="arrow" d="M -5,135 C 40,135 43,133 86,117 C 129,101 132,99 165,67" fill="none" marker-end="url(#id8)" /></g></svg>
    <!--[[[end]]]-->
</figurep>

<p>The mock.patch in our test is really just a fancy assignment to the name
"os.listdir".  During the test, the references look like this:</p>

<figurep>
    <!--[[[cog
    os_figure(2)
    ]]]-->
    <svg baseProfile="full" height="154.0" version="1.1" viewBox="0 0 349.0 154.0" width="349.0" xmlns="http://www.w3.org/2000/svg" xmlns:ev="http://www.w3.org/2001/xml-events" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><marker class="arrowend" id="id9" markerHeight="10" markerWidth="10" orient="auto" refX="10" refY="5" viewBox="0,0,10,10"><path d="M 0,0 L 10,5 L 0,10 L 1,5 z" /></marker></defs><g transform="translate(92.0,-13.0)"><rect class="module" height="75" rx="6" ry="6" width="100" x="35" y="15" /><text class="modulelabel" dy=".3em" opacity="1" text-anchor="middle" x="85" y="30">os module</text><polygon class="name" points="54,45 115,45 120,60 115,75 54,75" /><text dy=".3em" text-anchor="middle" x="85.125" y="60">listdir</text><rect class="string value" height="30" rx="15" ry="15" width="90" x="165" y="45" /><text dy=".3em" text-anchor="middle" x="210" y="60">listdir()</text><rect class="string value" height="30" rx="15" ry="15" width="90" x="165" y="90" /><text dy=".3em" text-anchor="middle" x="210" y="105">mock!</text><path class="arrow" d="M 120,60 C 135,60 137,65 142,79 C 148,94 149,99 165,102" fill="none" marker-end="url(#id9)" /><rect class="module" height="75" rx="6" ry="6" width="100" x="-90" y="90" /><text class="modulelabel" dy=".3em" opacity="1" text-anchor="middle" x="-40" y="105">product.py</text><polygon class="name" points="-71,120 -10,120 -5,135 -10,150 -71,150" /><text dy=".3em" text-anchor="middle" x="-39.875" y="135">listdir</text><path class="arrow" d="M -5,135 C 40,135 43,133 86,117 C 129,101 132,99 165,67" fill="none" marker-end="url(#id9)" /></g></svg>
    <!--[[[end]]]-->
</figurep>

<p>You can see why the mock doesn't work: we're mocking something, but it's not
the thing our product code is going to call. This situation is exactly analogous
to our code1.py example from earlier.</p>

<p>You might be thinking, "ok, so let's do that code2.py thing to make it work!"
If we do, it will work.  Your product code and test will now look like this (the
test code is unchanged):</p>

<code lang="python"><![CDATA[
# product.py

import os

def my_function():
    files = os.listdir(some_directory)
    # ... use the file names ...
]]></code>

<code lang="python"><![CDATA[
# test.py

def test_it():
    with mock.patch("os.listdir") as listdir:
        listdir.return_value = ['a.txt', 'b.txt', 'c.txt']
        my_function()
]]></code>

<p>When the test is run, the references look like this:</p>

<!--[[[cog
def import_mod_figure(frame_num):
    fig = start_figure(frame_num=frame_num)

    m_mod = fig.module(size=(MOD_WIDTH,160), n_names=1, text="os module")
    n_listdir = fig.auto_name("listdir")
    n_hidden = fig.auto_name("", rise=99)
    s_fn = fig.string(pos=fig.val_for_name(n_listdir), size=(90,30), text="listdir()", fade=1, set=2)
    s_mock = fig.string(pos=fig.val_for_name(n_hidden), size=(90,30), text="mock!", rise=2)

    if frame_num == 1:
        fig.reference(n_listdir, s_fn)
    else:
        fig.reference(n_listdir, s_mock, scooch=-.15)
    fig.end_module()

    pos = ('topleft', (m_mod.left - MOD_LEFT, m_mod.bottom))
    fig.module(pos=pos, size=(MOD_WIDTH,160), n_names=1, text="product.py")
    n_mod = fig.auto_name("os")
    fig.reference(n_mod, m_mod)
    fig.end_module()

    finish_figure(fig)
]]]-->
<!--[[[end]]]-->

<figurep>
    <!--[[[cog
    import_mod_figure(2)
    ]]]-->
    <svg baseProfile="full" height="154.0" version="1.1" viewBox="0 0 349.0 154.0" width="349.0" xmlns="http://www.w3.org/2000/svg" xmlns:ev="http://www.w3.org/2001/xml-events" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><marker class="arrowend" id="id10" markerHeight="10" markerWidth="10" orient="auto" refX="10" refY="5" viewBox="0,0,10,10"><path d="M 0,0 L 10,5 L 0,10 L 1,5 z" /></marker></defs><g transform="translate(92.0,-13.0)"><rect class="module" height="75" rx="6" ry="6" width="100" x="35" y="15" /><text class="modulelabel" dy=".3em" opacity="1" text-anchor="middle" x="85" y="30">os module</text><polygon class="name" points="54,45 115,45 120,60 115,75 54,75" /><text dy=".3em" text-anchor="middle" x="85.125" y="60">listdir</text><rect class="string value" height="30" opacity="0.25" rx="15" ry="15" width="90" x="165" y="45" /><text dy=".3em" opacity="0.25" text-anchor="middle" x="210" y="60">listdir()</text><rect class="string value" height="30" rx="15" ry="15" width="90" x="165" y="90" /><text dy=".3em" text-anchor="middle" x="210" y="105">mock!</text><path class="arrow" d="M 120,60 C 135,60 137,65 142,79 C 148,94 149,99 165,102" fill="none" marker-end="url(#id10)" /><rect class="module" height="75" rx="6" ry="6" width="100" x="-90" y="90" /><text class="modulelabel" dy=".3em" opacity="1" text-anchor="middle" x="-40" y="105">product.py</text><polygon class="name" points="-48,120 -10,120 -5,135 -10,150 -48,150" /><text dy=".3em" text-anchor="middle" x="-28.375" y="135">os</text><path class="arrow" d="M -5,135 C 17,135 16,116 15,93 C 13,70 12,52 35,52" fill="none" marker-end="url(#id10)" /></g></svg>
    <!--[[[end]]]-->
</figurep>

<p>Because the product code refers to the os module, changing the name in the
module is enough to affect the product code.</p>

<p>But there's still a problem: this will mock that function for any module
using it.  This might be a more widespread effect than you intended.  Perhaps
your product code also calls some helpers, which also need to list files.  The
helpers might end up using your mock (depending how they imported os.listdir!),
which isn't what you wanted.</p>


<h1>Mock it where it's used</h1>

<p>The best approach to mocking is to mock the object where it is used, not
where it is defined.  Your product and test code will look like this:</p>

<code lang="python"><![CDATA[
# product.py

from os import listdir

def my_function():
    files = listdir(some_directory)
    # ... use the file names ...
]]></code>

<code lang="python"><![CDATA[
# test.py

def test_it():
    with mock.patch("product.listdir") as listdir:
        listdir.return_value = False
        my_function()
]]></code>

<p>The only difference here from our first try is that we mock "product.listdir",
not "os.listdir".  That seems odd, because listdir isn't defined in
product.py.  That's fine, the name "listdir" is in both the os module and in
product.py, and they are both references to the thing you want to mock.  Neither
is a more real name than the other.</p>

<p>By mocking where the object is used, we have tighter control over what
callers are affected.  Since we only want product.py's behavior to change, we
mock the name in product.py.  This also makes the test more clearly tied to
product.py.</p>

<p>As before, our references look like this once product.py has been fully
imported:</p>

<!--[[[cog
def good_mock_figure(frame_num):
    fig = start_figure(frame_num=frame_num)

    m_mod = fig.module(size=(MOD_WIDTH,160), n_names=1, text="os module")
    n_listdir = fig.auto_name("listdir")
    s_fn = fig.string(pos=fig.val_for_name(n_listdir), size=(90,30), text="listdir()")
    fig.reference(n_listdir, s_fn)
    fig.end_module()

    pos = ('topleft', (m_mod.left - MOD_LEFT, m_mod.bottom))
    fig.module(pos=pos, size=(MOD_WIDTH,160), n_names=1, text="product.py")
    n_listdir2 = fig.auto_name("listdir")
    s_mock = fig.string(pos=fig.val_for_name(n_listdir2), size=(90,30), text="mock!", rise=2)
    if frame_num == 1:
        fig.reference(n_listdir2, s_fn, scooch=.5)
    else:
        fig.reference(n_listdir2, s_mock)
    fig.end_module()

    finish_figure(fig)
]]]-->
<!--[[[end]]]-->

<figurep>
    <!--[[[cog
    good_mock_figure(1)
    ]]]-->
    <svg baseProfile="full" height="154.0" version="1.1" viewBox="0 0 349.0 154.0" width="349.0" xmlns="http://www.w3.org/2000/svg" xmlns:ev="http://www.w3.org/2001/xml-events" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><marker class="arrowend" id="id11" markerHeight="10" markerWidth="10" orient="auto" refX="10" refY="5" viewBox="0,0,10,10"><path d="M 0,0 L 10,5 L 0,10 L 1,5 z" /></marker></defs><g transform="translate(92.0,-13.0)"><rect class="module" height="75" rx="6" ry="6" width="100" x="35" y="15" /><text class="modulelabel" dy=".3em" opacity="1" text-anchor="middle" x="85" y="30">os module</text><polygon class="name" points="54,45 115,45 120,60 115,75 54,75" /><text dy=".3em" text-anchor="middle" x="85.125" y="60">listdir</text><rect class="string value" height="30" rx="15" ry="15" width="90" x="165" y="45" /><text dy=".3em" text-anchor="middle" x="210" y="60">listdir()</text><path class="arrow" d="M 120,60 C 131,60 131,60 142,60 C 153,60 153,60 165,60" fill="none" marker-end="url(#id11)" /><rect class="module" height="75" rx="6" ry="6" width="100" x="-90" y="90" /><text class="modulelabel" dy=".3em" opacity="1" text-anchor="middle" x="-40" y="105">product.py</text><polygon class="name" points="-71,120 -10,120 -5,135 -10,150 -71,150" /><text dy=".3em" text-anchor="middle" x="-39.875" y="135">listdir</text><path class="arrow" d="M -5,135 C 40,135 43,133 86,117 C 129,101 132,99 165,67" fill="none" marker-end="url(#id11)" /></g></svg>
    <!--[[[end]]]-->
</figurep>

<p>The difference now is how the mock changes things.  During the test, our references look like this:</p>

<figurep>
    <!--[[[cog
    good_mock_figure(2)
    ]]]-->
    <svg baseProfile="full" height="154.0" version="1.1" viewBox="0 0 349.0 154.0" width="349.0" xmlns="http://www.w3.org/2000/svg" xmlns:ev="http://www.w3.org/2001/xml-events" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><marker class="arrowend" id="id12" markerHeight="10" markerWidth="10" orient="auto" refX="10" refY="5" viewBox="0,0,10,10"><path d="M 0,0 L 10,5 L 0,10 L 1,5 z" /></marker></defs><g transform="translate(92.0,-13.0)"><rect class="module" height="75" rx="6" ry="6" width="100" x="35" y="15" /><text class="modulelabel" dy=".3em" opacity="1" text-anchor="middle" x="85" y="30">os module</text><polygon class="name" points="54,45 115,45 120,60 115,75 54,75" /><text dy=".3em" text-anchor="middle" x="85.125" y="60">listdir</text><rect class="string value" height="30" rx="15" ry="15" width="90" x="165" y="45" /><text dy=".3em" text-anchor="middle" x="210" y="60">listdir()</text><path class="arrow" d="M 120,60 C 131,60 131,60 142,60 C 153,60 153,60 165,60" fill="none" marker-end="url(#id12)" /><rect class="module" height="75" rx="6" ry="6" width="100" x="-90" y="90" /><text class="modulelabel" dy=".3em" opacity="1" text-anchor="middle" x="-40" y="105">product.py</text><polygon class="name" points="-71,120 -10,120 -5,135 -10,150 -71,150" /><text dy=".3em" text-anchor="middle" x="-39.875" y="135">listdir</text><rect class="string value" height="30" rx="15" ry="15" width="90" x="165" y="120" /><text dy=".3em" text-anchor="middle" x="210" y="135">mock!</text><path class="arrow" d="M -5,135 C 37,135 37,135 80,135 C 122,135 122,135 165,135" fill="none" marker-end="url(#id12)" /></g></svg>
    <!--[[[end]]]-->
</figurep>

<p>The code in product.py will use the mock, and no other code will.  Just what
we wanted!</p>


<h1>Is this OK?</h1>

<p>At this point, you might be concerned: it seems like mocking is kind of
delicate.  Notice that even with our last example, how we create the mock
depends on something as arbitrary as how we imported the function.  If our code
had "import os" at the top, we wouldn't have been able to create our mock
properly.  This is something that could be changed in a refactoring, but at
least mock.patch will fail in that case.</p>

<p>You are right to be concerned: mocking is delicate.  It depends on
implementation details of the product code to construct the test.  There are
many reasons to be wary of mocks, and there are other approaches to solving the
problems of isolating your product code from problematic dependencies.</p>

<p>If you do use mocks, at least now you know how to make them work, but again,
there are other approaches.  See the links at the top of this page.</p>

</body>
</entry>
</blog>
