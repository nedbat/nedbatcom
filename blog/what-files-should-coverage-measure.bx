<?xml version='1.0' encoding='utf-8'?>
<blog>
<entry when='20120328T085100'>
<title>What files should coverage measure?</title>
<category>coverage</category>
<body>

    <p>Maybe this is crazy, but I'm looking for advice.</p>

    <p>Conceptually, <a href='/code/coverage'>coverage.py</a> is pretty simple.
        First, using the <a href='http://docs.python.org/library/sys.html#sys.settrace'>sys.settrace</a>
        facility in Python, record every line that is executed.  Then, after
        the program is done, report on those lines, and especially on lines
        that could have been executed but were not.</p>

    <p>Of course, the reality is more difficult.  During execution, to record
        the line, we have to find the file name, which we get from the stack
        frame.  Later, we look for that file by name to create the report.
        Sometimes, the file isn't a Python file!</p>

    <p>One reason this can happen is if the file was actually created by a
        tool, and the tool provides the original source file as the reported
        name.  For example, <a href='http://jinja.pocoo.org/'>Jinja</a>
        compiles .html files to Python code, and when the code is running, it
        claims to be "mytemplate.html".  When coverage.py tries to report on
        the file, it can't parse it as Python, and things go wrong.</p>

    <p>Originally, this error would be reported to the user.  There's a -i
        switch that shuts off all errors like this, but it seemed dumb for
        coverage.py to get confused by something like this.  So I changed it
        to not trace files named "*.html".</p>

    <p>Of course, the world is more varied than that, so I got a
        <a href='https://bitbucket.org/ned/coveragepy/issue/82/tokenerror-when-generating-html-report'>report</a>
        of someone with Jinja2 files named "*.jinja2" which now trip the error.
        So I need a more general solution.</p>

    <p>I figure there are a couple of possibilities:</p>

    <ol>

        <li>Don't measure files at all if they have an extension that isn't
            ".py".  This will let us measure extension-less files, and .py
            files, and will ignore all the rest, on the theory that any other
            extension implies that we won't be able to parse it later anyway.
        </li>

        <li>Measure all files, but during reporting, if a file can't be parsed,
            ignore the error if it has an extension that isn't "*.py".</li>

        <li>(Shudder) Make a configuration option about what extensions to
            measure, or which to ignore.</li>

        <li>Some people want "ignore errors" to be the default, but if a file
            is missing for some reason, it's important to know, because it will
            throw off the reporting, and that shouldn't happen silently.</li>

    </ol>

    <p>Do people ever name their Python source files something other than
        "*.py"?  Are there weird ecosystems like this that I'll only hear about
        if I make one of these changes?</p>

</body>
</entry>
</blog>
